
youlostit-ble.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003250  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  080033d8  080033d8  000133d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800343c  0800343c  0002018c  2**0
                  CONTENTS
  4 .ARM          00000000  0800343c  0800343c  0002018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800343c  0800343c  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800343c  0800343c  0001343c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003440  08003440  00013440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08003444  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  2000018c  080035d0  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  080035d0  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a515  00000000  00000000  000201ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f18  00000000  00000000  0002a714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  0002c630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000719  00000000  00000000  0002cfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002722b  00000000  00000000  0002d6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a9ed  00000000  00000000  0005490c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0c87  00000000  00000000  0005f2f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002838  00000000  00000000  0014ff80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001527b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000018c 	.word	0x2000018c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080033c0 	.word	0x080033c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000190 	.word	0x20000190
 80001c4:	080033c0 	.word	0x080033c0

080001c8 <ble_init>:
uint8_t READ_CHAR_HANDLE[2];

uint16_t stackInitCompleteFlag=0;
uint8_t* rxEvent;

void ble_init(){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af02      	add	r7, sp, #8
	//fetching the reset event
	rxEvent=(uint8_t*)malloc(EVENT_STARTUP_SIZE);
 80001ce:	2006      	movs	r0, #6
 80001d0:	f002 ff9c 	bl	800310c <malloc>
 80001d4:	4603      	mov	r3, r0
 80001d6:	461a      	mov	r2, r3
 80001d8:	4b70      	ldr	r3, [pc, #448]	; (800039c <ble_init+0x1d4>)
 80001da:	601a      	str	r2, [r3, #0]
	int res;

	while(!dataAvailable);
 80001dc:	bf00      	nop
 80001de:	4b70      	ldr	r3, [pc, #448]	; (80003a0 <ble_init+0x1d8>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d0fb      	beq.n	80001de <ble_init+0x16>
	res=fetchBleEvent(rxEvent,EVENT_STARTUP_SIZE);
 80001e6:	4b6d      	ldr	r3, [pc, #436]	; (800039c <ble_init+0x1d4>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2106      	movs	r1, #6
 80001ec:	4618      	mov	r0, r3
 80001ee:	f000 f905 	bl	80003fc <fetchBleEvent>
 80001f2:	6078      	str	r0, [r7, #4]

	if(res==BLE_OK){
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	2b00      	cmp	r3, #0
 80001f8:	d111      	bne.n	800021e <ble_init+0x56>
	res=checkEventResp(rxEvent,EVENT_STATUP_DATA,EVENT_STARTUP_SIZE);
 80001fa:	4b68      	ldr	r3, [pc, #416]	; (800039c <ble_init+0x1d4>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	2206      	movs	r2, #6
 8000200:	4968      	ldr	r1, [pc, #416]	; (80003a4 <ble_init+0x1dc>)
 8000202:	4618      	mov	r0, r3
 8000204:	f000 f984 	bl	8000510 <checkEventResp>
 8000208:	6078      	str	r0, [r7, #4]
	if(res==BLE_OK){
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d106      	bne.n	800021e <ble_init+0x56>
	   stackInitCompleteFlag|=0x01;
 8000210:	4b65      	ldr	r3, [pc, #404]	; (80003a8 <ble_init+0x1e0>)
 8000212:	881b      	ldrh	r3, [r3, #0]
 8000214:	f043 0301 	orr.w	r3, r3, #1
 8000218:	b29a      	uxth	r2, r3
 800021a:	4b63      	ldr	r3, [pc, #396]	; (80003a8 <ble_init+0x1e0>)
 800021c:	801a      	strh	r2, [r3, #0]
	}
	}
	HAL_Delay(10);
 800021e:	200a      	movs	r0, #10
 8000220:	f001 f876 	bl	8001310 <HAL_Delay>
	free(rxEvent);
 8000224:	4b5d      	ldr	r3, [pc, #372]	; (800039c <ble_init+0x1d4>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	4618      	mov	r0, r3
 800022a:	f002 ff77 	bl	800311c <free>

	//INIT GATT
	if(BLE_command(ACI_GATT_INIT,sizeof(ACI_GATT_INIT),ACI_GATT_INIT_COMPLETE,sizeof(ACI_GATT_INIT_COMPLETE),0)==BLE_OK){
 800022e:	2300      	movs	r3, #0
 8000230:	9300      	str	r3, [sp, #0]
 8000232:	2307      	movs	r3, #7
 8000234:	4a5d      	ldr	r2, [pc, #372]	; (80003ac <ble_init+0x1e4>)
 8000236:	2104      	movs	r1, #4
 8000238:	485d      	ldr	r0, [pc, #372]	; (80003b0 <ble_init+0x1e8>)
 800023a:	f000 fa77 	bl	800072c <BLE_command>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d106      	bne.n	8000252 <ble_init+0x8a>
	   stackInitCompleteFlag|=0x02;
 8000244:	4b58      	ldr	r3, [pc, #352]	; (80003a8 <ble_init+0x1e0>)
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	f043 0302 	orr.w	r3, r3, #2
 800024c:	b29a      	uxth	r2, r3
 800024e:	4b56      	ldr	r3, [pc, #344]	; (80003a8 <ble_init+0x1e0>)
 8000250:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000252:	4b52      	ldr	r3, [pc, #328]	; (800039c <ble_init+0x1d4>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	4618      	mov	r0, r3
 8000258:	f002 ff60 	bl	800311c <free>

	//INIT GAP, actually the handle that i get is a GATT handle of a service, will change the name later
	if(BLE_command(ACI_GAP_INIT,sizeof(ACI_GAP_INIT),ACI_GAP_INIT_COMPLETE,sizeof(ACI_GAP_INIT_COMPLETE),3)==BLE_OK){
 800025c:	2303      	movs	r3, #3
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	2307      	movs	r3, #7
 8000262:	4a54      	ldr	r2, [pc, #336]	; (80003b4 <ble_init+0x1ec>)
 8000264:	2107      	movs	r1, #7
 8000266:	4854      	ldr	r0, [pc, #336]	; (80003b8 <ble_init+0x1f0>)
 8000268:	f000 fa60 	bl	800072c <BLE_command>
 800026c:	4603      	mov	r3, r0
 800026e:	2b00      	cmp	r3, #0
 8000270:	d11b      	bne.n	80002aa <ble_init+0xe2>
	   stackInitCompleteFlag|=0x04;
 8000272:	4b4d      	ldr	r3, [pc, #308]	; (80003a8 <ble_init+0x1e0>)
 8000274:	881b      	ldrh	r3, [r3, #0]
 8000276:	f043 0304 	orr.w	r3, r3, #4
 800027a:	b29a      	uxth	r2, r3
 800027c:	4b4a      	ldr	r3, [pc, #296]	; (80003a8 <ble_init+0x1e0>)
 800027e:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_SERVICE_HANDLE,rxEvent+7,2);
 8000280:	4b46      	ldr	r3, [pc, #280]	; (800039c <ble_init+0x1d4>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	3307      	adds	r3, #7
 8000286:	881b      	ldrh	r3, [r3, #0]
 8000288:	b29a      	uxth	r2, r3
 800028a:	4b4c      	ldr	r3, [pc, #304]	; (80003bc <ble_init+0x1f4>)
 800028c:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_NAME_HANDLE,rxEvent+9,2);
 800028e:	4b43      	ldr	r3, [pc, #268]	; (800039c <ble_init+0x1d4>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	3309      	adds	r3, #9
 8000294:	881b      	ldrh	r3, [r3, #0]
 8000296:	b29a      	uxth	r2, r3
 8000298:	4b49      	ldr	r3, [pc, #292]	; (80003c0 <ble_init+0x1f8>)
 800029a:	801a      	strh	r2, [r3, #0]
	   memcpy(GAP_CHAR_APP_HANDLE,rxEvent+11,2);
 800029c:	4b3f      	ldr	r3, [pc, #252]	; (800039c <ble_init+0x1d4>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	330b      	adds	r3, #11
 80002a2:	881b      	ldrh	r3, [r3, #0]
 80002a4:	b29a      	uxth	r2, r3
 80002a6:	4b47      	ldr	r3, [pc, #284]	; (80003c4 <ble_init+0x1fc>)
 80002a8:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 80002aa:	4b3c      	ldr	r3, [pc, #240]	; (800039c <ble_init+0x1d4>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 ff34 	bl	800311c <free>

	//SET THE NAME OF THE BOARD IN THE SERVICE CREATED AUTOMATICALLY
	updateCharValue(GAP_SERVICE_HANDLE,GAP_CHAR_NAME_HANDLE,0,sizeof(deviceName),deviceName);
 80002b4:	4b44      	ldr	r3, [pc, #272]	; (80003c8 <ble_init+0x200>)
 80002b6:	9300      	str	r3, [sp, #0]
 80002b8:	2306      	movs	r3, #6
 80002ba:	2200      	movs	r2, #0
 80002bc:	4940      	ldr	r1, [pc, #256]	; (80003c0 <ble_init+0x1f8>)
 80002be:	483f      	ldr	r0, [pc, #252]	; (80003bc <ble_init+0x1f4>)
 80002c0:	f000 fafa 	bl	80008b8 <updateCharValue>
	stackInitCompleteFlag|=0x08;
 80002c4:	4b38      	ldr	r3, [pc, #224]	; (80003a8 <ble_init+0x1e0>)
 80002c6:	881b      	ldrh	r3, [r3, #0]
 80002c8:	f043 0308 	orr.w	r3, r3, #8
 80002cc:	b29a      	uxth	r2, r3
 80002ce:	4b36      	ldr	r3, [pc, #216]	; (80003a8 <ble_init+0x1e0>)
 80002d0:	801a      	strh	r2, [r3, #0]
	free(rxEvent);
 80002d2:	4b32      	ldr	r3, [pc, #200]	; (800039c <ble_init+0x1d4>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4618      	mov	r0, r3
 80002d8:	f002 ff20 	bl	800311c <free>

	//INIT AUTH
	if(BLE_command(ACI_GAP_SET_AUTH,sizeof(ACI_GAP_SET_AUTH),ACI_GAP_SET_AUTH_RESP,sizeof(ACI_GAP_SET_AUTH_RESP),0)==BLE_OK){
 80002dc:	2300      	movs	r3, #0
 80002de:	9300      	str	r3, [sp, #0]
 80002e0:	2307      	movs	r3, #7
 80002e2:	4a3a      	ldr	r2, [pc, #232]	; (80003cc <ble_init+0x204>)
 80002e4:	2110      	movs	r1, #16
 80002e6:	483a      	ldr	r0, [pc, #232]	; (80003d0 <ble_init+0x208>)
 80002e8:	f000 fa20 	bl	800072c <BLE_command>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d106      	bne.n	8000300 <ble_init+0x138>
	   stackInitCompleteFlag|=0x10;
 80002f2:	4b2d      	ldr	r3, [pc, #180]	; (80003a8 <ble_init+0x1e0>)
 80002f4:	881b      	ldrh	r3, [r3, #0]
 80002f6:	f043 0310 	orr.w	r3, r3, #16
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	4b2a      	ldr	r3, [pc, #168]	; (80003a8 <ble_init+0x1e0>)
 80002fe:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 8000300:	4b26      	ldr	r3, [pc, #152]	; (800039c <ble_init+0x1d4>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4618      	mov	r0, r3
 8000306:	f002 ff09 	bl	800311c <free>

	//SET_TX_LEVEL
	if(BLE_command(ACI_HAL_SET_TX_POWER_LEVEL,sizeof(ACI_HAL_SET_TX_POWER_LEVEL),ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE,sizeof(ACI_HAL_SET_TX_POWER_LEVEL_COMPLETE),0)==BLE_OK){
 800030a:	2300      	movs	r3, #0
 800030c:	9300      	str	r3, [sp, #0]
 800030e:	2307      	movs	r3, #7
 8000310:	4a30      	ldr	r2, [pc, #192]	; (80003d4 <ble_init+0x20c>)
 8000312:	2106      	movs	r1, #6
 8000314:	4830      	ldr	r0, [pc, #192]	; (80003d8 <ble_init+0x210>)
 8000316:	f000 fa09 	bl	800072c <BLE_command>
 800031a:	4603      	mov	r3, r0
 800031c:	2b00      	cmp	r3, #0
 800031e:	d106      	bne.n	800032e <ble_init+0x166>
	   stackInitCompleteFlag|=0x20;
 8000320:	4b21      	ldr	r3, [pc, #132]	; (80003a8 <ble_init+0x1e0>)
 8000322:	881b      	ldrh	r3, [r3, #0]
 8000324:	f043 0320 	orr.w	r3, r3, #32
 8000328:	b29a      	uxth	r2, r3
 800032a:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <ble_init+0x1e0>)
 800032c:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 800032e:	4b1b      	ldr	r3, [pc, #108]	; (800039c <ble_init+0x1d4>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	4618      	mov	r0, r3
 8000334:	f002 fef2 	bl	800311c <free>

	//SET SCAN RESPONSE DATA
	if(BLE_command(HCI_LE_SET_SCAN_RESPONSE_DATA,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA),HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE,sizeof(HCI_LE_SET_SCAN_RESPONSE_DATA_COMPLETE),0)==BLE_OK){
 8000338:	2300      	movs	r3, #0
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	2307      	movs	r3, #7
 800033e:	4a27      	ldr	r2, [pc, #156]	; (80003dc <ble_init+0x214>)
 8000340:	2124      	movs	r1, #36	; 0x24
 8000342:	4827      	ldr	r0, [pc, #156]	; (80003e0 <ble_init+0x218>)
 8000344:	f000 f9f2 	bl	800072c <BLE_command>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d106      	bne.n	800035c <ble_init+0x194>
	   stackInitCompleteFlag|=0x40;
 800034e:	4b16      	ldr	r3, [pc, #88]	; (80003a8 <ble_init+0x1e0>)
 8000350:	881b      	ldrh	r3, [r3, #0]
 8000352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000356:	b29a      	uxth	r2, r3
 8000358:	4b13      	ldr	r3, [pc, #76]	; (80003a8 <ble_init+0x1e0>)
 800035a:	801a      	strh	r2, [r3, #0]
	}
	free(rxEvent);
 800035c:	4b0f      	ldr	r3, [pc, #60]	; (800039c <ble_init+0x1d4>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4618      	mov	r0, r3
 8000362:	f002 fedb 	bl	800311c <free>

	//This will start the advertisment,
	setConnectable();
 8000366:	f000 f963 	bl	8000630 <setConnectable>

	//add the nordic UART service
	addService(UUID_NORDIC_UART_SERVICE,NORDIC_UART_SERVICE_HANDLE,SET_ATTRIBUTES(7)); //SET_ATTRIBUTES(1+2+3*2+3+3));//1 atribute service +2 attribute char readable+3*(2 NOTIFYABLE READABLE charachteristics)
 800036a:	2207      	movs	r2, #7
 800036c:	491d      	ldr	r1, [pc, #116]	; (80003e4 <ble_init+0x21c>)
 800036e:	481e      	ldr	r0, [pc, #120]	; (80003e8 <ble_init+0x220>)
 8000370:	f000 fa28 	bl	80007c4 <addService>

	//add the nordic UART charachteristics
	addCharacteristic(UUID_CHAR_READ,READ_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),NOTIFIBLE);
 8000374:	2310      	movs	r3, #16
 8000376:	9300      	str	r3, [sp, #0]
 8000378:	2314      	movs	r3, #20
 800037a:	4a1a      	ldr	r2, [pc, #104]	; (80003e4 <ble_init+0x21c>)
 800037c:	491b      	ldr	r1, [pc, #108]	; (80003ec <ble_init+0x224>)
 800037e:	481c      	ldr	r0, [pc, #112]	; (80003f0 <ble_init+0x228>)
 8000380:	f000 fa58 	bl	8000834 <addCharacteristic>
	addCharacteristic(UUID_CHAR_WRITE,WRITE_CHAR_HANDLE,NORDIC_UART_SERVICE_HANDLE,SET_CONTENT_LENGTH(20),WRITABLE);
 8000384:	2304      	movs	r3, #4
 8000386:	9300      	str	r3, [sp, #0]
 8000388:	2314      	movs	r3, #20
 800038a:	4a16      	ldr	r2, [pc, #88]	; (80003e4 <ble_init+0x21c>)
 800038c:	4919      	ldr	r1, [pc, #100]	; (80003f4 <ble_init+0x22c>)
 800038e:	481a      	ldr	r0, [pc, #104]	; (80003f8 <ble_init+0x230>)
 8000390:	f000 fa50 	bl	8000834 <addCharacteristic>

	if(stackInitCompleteFlag==255){
	  //turn on led blue if everything was fine
	//  HAL_GPIO_WritePin(CPU_LED_GPIO_Port,CPU_LED_Pin,GPIO_PIN_SET);
	}
	return;
 8000394:	bf00      	nop
}
 8000396:	3708      	adds	r7, #8
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	200002c0 	.word	0x200002c0
 80003a0:	200002d8 	.word	0x200002d8
 80003a4:	20000000 	.word	0x20000000
 80003a8:	200002be 	.word	0x200002be
 80003ac:	2000000c 	.word	0x2000000c
 80003b0:	20000008 	.word	0x20000008
 80003b4:	2000001c 	.word	0x2000001c
 80003b8:	20000014 	.word	0x20000014
 80003bc:	200001a8 	.word	0x200001a8
 80003c0:	200001ac 	.word	0x200001ac
 80003c4:	200001b0 	.word	0x200001b0
 80003c8:	200000ec 	.word	0x200000ec
 80003cc:	20000034 	.word	0x20000034
 80003d0:	20000024 	.word	0x20000024
 80003d4:	20000044 	.word	0x20000044
 80003d8:	2000003c 	.word	0x2000003c
 80003dc:	20000070 	.word	0x20000070
 80003e0:	2000004c 	.word	0x2000004c
 80003e4:	200002b4 	.word	0x200002b4
 80003e8:	200000f4 	.word	0x200000f4
 80003ec:	200002bc 	.word	0x200002bc
 80003f0:	20000114 	.word	0x20000114
 80003f4:	200002b8 	.word	0x200002b8
 80003f8:	20000104 	.word	0x20000104

080003fc <fetchBleEvent>:
	 if(BLE_command(ACI_HAL_SET_STANDBY,sizeof(ACI_HAL_SET_STANDBY),ACI_HAL_SET_STANDBY_COMPLETE,sizeof(ACI_HAL_SET_STANDBY_COMPLETE),0)==BLE_OK){
	 }
	 free(rxEvent);
}

int fetchBleEvent(uint8_t *container, int size){
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b08c      	sub	sp, #48	; 0x30
 8000400:	af02      	add	r7, sp, #8
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	6039      	str	r1, [r7, #0]

  uint8_t master_header[]={0x0b,0x00,0x00,0x00,0x00};
 8000406:	4a3d      	ldr	r2, [pc, #244]	; (80004fc <fetchBleEvent+0x100>)
 8000408:	f107 0318 	add.w	r3, r7, #24
 800040c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000410:	6018      	str	r0, [r3, #0]
 8000412:	3304      	adds	r3, #4
 8000414:	7019      	strb	r1, [r3, #0]
  uint8_t slave_header[5];

  //Wait until it is available an event coming from the BLE module (GPIO PIN COULD CHANGE ACCORDING TO THE BOARD)
  if(HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000416:	2140      	movs	r1, #64	; 0x40
 8000418:	4839      	ldr	r0, [pc, #228]	; (8000500 <fetchBleEvent+0x104>)
 800041a:	f001 fa59 	bl	80018d0 <HAL_GPIO_ReadPin>
 800041e:	4603      	mov	r3, r0
 8000420:	2b00      	cmp	r3, #0
 8000422:	d065      	beq.n	80004f0 <fetchBleEvent+0xf4>

  HAL_Delay(5);
 8000424:	2005      	movs	r0, #5
 8000426:	f000 ff73 	bl	8001310 <HAL_Delay>
  //PIN_CS of SPI2 LOW
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000430:	4834      	ldr	r0, [pc, #208]	; (8000504 <fetchBleEvent+0x108>)
 8000432:	f001 fa65 	bl	8001900 <HAL_GPIO_WritePin>

  //SPI2 in this case, it could change according to the board
  //we send a byte containing a request of reading followed by 4 dummy bytes
  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000436:	f107 0210 	add.w	r2, r7, #16
 800043a:	f107 0118 	add.w	r1, r7, #24
 800043e:	2301      	movs	r3, #1
 8000440:	9300      	str	r3, [sp, #0]
 8000442:	2305      	movs	r3, #5
 8000444:	4830      	ldr	r0, [pc, #192]	; (8000508 <fetchBleEvent+0x10c>)
 8000446:	f002 fadb 	bl	8002a00 <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 800044a:	2201      	movs	r2, #1
 800044c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000450:	482c      	ldr	r0, [pc, #176]	; (8000504 <fetchBleEvent+0x108>)
 8000452:	f001 fa55 	bl	8001900 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000456:	2001      	movs	r0, #1
 8000458:	f000 ff5a 	bl	8001310 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 800045c:	2200      	movs	r2, #0
 800045e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000462:	4828      	ldr	r0, [pc, #160]	; (8000504 <fetchBleEvent+0x108>)
 8000464:	f001 fa4c 	bl	8001900 <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000468:	f107 0210 	add.w	r2, r7, #16
 800046c:	f107 0118 	add.w	r1, r7, #24
 8000470:	2301      	movs	r3, #1
 8000472:	9300      	str	r3, [sp, #0]
 8000474:	2305      	movs	r3, #5
 8000476:	4824      	ldr	r0, [pc, #144]	; (8000508 <fetchBleEvent+0x10c>)
 8000478:	f002 fac2 	bl	8002a00 <HAL_SPI_TransmitReceive>

  //let's get the size of data available
  int dataSize;
  dataSize=(slave_header[3]|slave_header[4]<<8);
 800047c:	7cfb      	ldrb	r3, [r7, #19]
 800047e:	461a      	mov	r2, r3
 8000480:	7d3b      	ldrb	r3, [r7, #20]
 8000482:	021b      	lsls	r3, r3, #8
 8000484:	4313      	orrs	r3, r2
 8000486:	627b      	str	r3, [r7, #36]	; 0x24
  int i;
  char dummy=0xff;
 8000488:	23ff      	movs	r3, #255	; 0xff
 800048a:	73fb      	strb	r3, [r7, #15]

  if(dataSize>size){
 800048c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	429a      	cmp	r2, r3
 8000492:	dd01      	ble.n	8000498 <fetchBleEvent+0x9c>
	  dataSize=size;
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	627b      	str	r3, [r7, #36]	; 0x24
  }

  if(dataSize>0){
 8000498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800049a:	2b00      	cmp	r3, #0
 800049c:	dd1f      	ble.n	80004de <fetchBleEvent+0xe2>
	    //let's fill the get the bytes availables and insert them into the container variable
  		for(i=0;i<dataSize;i++){
 800049e:	2300      	movs	r3, #0
 80004a0:	623b      	str	r3, [r7, #32]
 80004a2:	e00d      	b.n	80004c0 <fetchBleEvent+0xc4>
  		HAL_SPI_TransmitReceive(&hspi3,(uint8_t*)&dummy,container+i,1,1);
 80004a4:	6a3b      	ldr	r3, [r7, #32]
 80004a6:	687a      	ldr	r2, [r7, #4]
 80004a8:	441a      	add	r2, r3
 80004aa:	f107 010f 	add.w	r1, r7, #15
 80004ae:	2301      	movs	r3, #1
 80004b0:	9300      	str	r3, [sp, #0]
 80004b2:	2301      	movs	r3, #1
 80004b4:	4814      	ldr	r0, [pc, #80]	; (8000508 <fetchBleEvent+0x10c>)
 80004b6:	f002 faa3 	bl	8002a00 <HAL_SPI_TransmitReceive>
  		for(i=0;i<dataSize;i++){
 80004ba:	6a3b      	ldr	r3, [r7, #32]
 80004bc:	3301      	adds	r3, #1
 80004be:	623b      	str	r3, [r7, #32]
 80004c0:	6a3a      	ldr	r2, [r7, #32]
 80004c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004c4:	429a      	cmp	r2, r3
 80004c6:	dbed      	blt.n	80004a4 <fetchBleEvent+0xa8>

  		}
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80004c8:	2201      	movs	r2, #1
 80004ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ce:	480d      	ldr	r0, [pc, #52]	; (8000504 <fetchBleEvent+0x108>)
 80004d0:	f001 fa16 	bl	8001900 <HAL_GPIO_WritePin>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
        return -1;
  	}

  //let's stop the SPI2
  dataAvailable=0;
 80004d4:	4b0d      	ldr	r3, [pc, #52]	; (800050c <fetchBleEvent+0x110>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
  return BLE_OK;
 80004da:	2300      	movs	r3, #0
 80004dc:	e00a      	b.n	80004f4 <fetchBleEvent+0xf8>
  		HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80004de:	2201      	movs	r2, #1
 80004e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e4:	4807      	ldr	r0, [pc, #28]	; (8000504 <fetchBleEvent+0x108>)
 80004e6:	f001 fa0b 	bl	8001900 <HAL_GPIO_WritePin>
        return -1;
 80004ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004ee:	e001      	b.n	80004f4 <fetchBleEvent+0xf8>
  }else{
  return -2;
 80004f0:	f06f 0301 	mvn.w	r3, #1
  }
}
 80004f4:	4618      	mov	r0, r3
 80004f6:	3728      	adds	r7, #40	; 0x28
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	080033d8 	.word	0x080033d8
 8000500:	48001000 	.word	0x48001000
 8000504:	48000c00 	.word	0x48000c00
 8000508:	200002dc 	.word	0x200002dc
 800050c:	200002d8 	.word	0x200002d8

08000510 <checkEventResp>:


int checkEventResp(uint8_t *event, uint8_t *reference, int size){
 8000510:	b480      	push	{r7}
 8000512:	b087      	sub	sp, #28
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
	int j=0;
 800051c:	2300      	movs	r3, #0
 800051e:	617b      	str	r3, [r7, #20]

	for(j=0;j<size;j++){
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	e00f      	b.n	8000546 <checkEventResp+0x36>

		if(event[j]!=reference[j]){
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	4413      	add	r3, r2
 800052c:	781a      	ldrb	r2, [r3, #0]
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	68b9      	ldr	r1, [r7, #8]
 8000532:	440b      	add	r3, r1
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	429a      	cmp	r2, r3
 8000538:	d002      	beq.n	8000540 <checkEventResp+0x30>
			return -1;
 800053a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800053e:	e007      	b.n	8000550 <checkEventResp+0x40>
	for(j=0;j<size;j++){
 8000540:	697b      	ldr	r3, [r7, #20]
 8000542:	3301      	adds	r3, #1
 8000544:	617b      	str	r3, [r7, #20]
 8000546:	697a      	ldr	r2, [r7, #20]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	429a      	cmp	r2, r3
 800054c:	dbeb      	blt.n	8000526 <checkEventResp+0x16>
		}
	}

return BLE_OK;
 800054e:	2300      	movs	r3, #0
}
 8000550:	4618      	mov	r0, r3
 8000552:	371c      	adds	r7, #28
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <sendCommand>:

//TODO make it not blocking function
void sendCommand(uint8_t *command,int size){
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	; 0x28
 8000560:	af02      	add	r7, sp, #8
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]

	  uint8_t master_header[]={0x0a,0x00,0x00,0x00,0x00};
 8000566:	4a1f      	ldr	r2, [pc, #124]	; (80005e4 <sendCommand+0x88>)
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000570:	6018      	str	r0, [r3, #0]
 8000572:	3304      	adds	r3, #4
 8000574:	7019      	strb	r1, [r3, #0]
	  uint8_t slave_header[5];

	  int result;

	do{
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,0);
 8000576:	2200      	movs	r2, #0
 8000578:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800057c:	481a      	ldr	r0, [pc, #104]	; (80005e8 <sendCommand+0x8c>)
 800057e:	f001 f9bf 	bl	8001900 <HAL_GPIO_WritePin>

	  //wait until it is possible to write
	  //while(!dataAvailable);
	  HAL_SPI_TransmitReceive(&hspi3,master_header,slave_header,5,1);
 8000582:	f107 0208 	add.w	r2, r7, #8
 8000586:	f107 0110 	add.w	r1, r7, #16
 800058a:	2301      	movs	r3, #1
 800058c:	9300      	str	r3, [sp, #0]
 800058e:	2305      	movs	r3, #5
 8000590:	4816      	ldr	r0, [pc, #88]	; (80005ec <sendCommand+0x90>)
 8000592:	f002 fa35 	bl	8002a00 <HAL_SPI_TransmitReceive>
	  int bufferSize=(slave_header[2]<<8|slave_header[1]);
 8000596:	7abb      	ldrb	r3, [r7, #10]
 8000598:	021b      	lsls	r3, r3, #8
 800059a:	7a7a      	ldrb	r2, [r7, #9]
 800059c:	4313      	orrs	r3, r2
 800059e:	61bb      	str	r3, [r7, #24]
	  if(bufferSize>=size){
 80005a0:	69ba      	ldr	r2, [r7, #24]
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	429a      	cmp	r2, r3
 80005a6:	db09      	blt.n	80005bc <sendCommand+0x60>
		HAL_SPI_Transmit(&hspi3,command,size,1);
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	2301      	movs	r3, #1
 80005ae:	6879      	ldr	r1, [r7, #4]
 80005b0:	480e      	ldr	r0, [pc, #56]	; (80005ec <sendCommand+0x90>)
 80005b2:	f002 f8b0 	bl	8002716 <HAL_SPI_Transmit>
		result=0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	61fb      	str	r3, [r7, #28]
 80005ba:	e002      	b.n	80005c2 <sendCommand+0x66>
	  }else{
		result=-1;
 80005bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005c0:	61fb      	str	r3, [r7, #28]
	  }
	  HAL_GPIO_WritePin(BLE_CS_GPIO_Port,BLE_CS_Pin,1);
 80005c2:	2201      	movs	r2, #1
 80005c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <sendCommand+0x8c>)
 80005ca:	f001 f999 	bl	8001900 <HAL_GPIO_WritePin>
	  dataAvailable=0;
 80005ce:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <sendCommand+0x94>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
	}while(result!=0);
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d1cd      	bne.n	8000576 <sendCommand+0x1a>

}
 80005da:	bf00      	nop
 80005dc:	bf00      	nop
 80005de:	3720      	adds	r7, #32
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	080033e0 	.word	0x080033e0
 80005e8:	48000c00 	.word	0x48000c00
 80005ec:	200002dc 	.word	0x200002dc
 80005f0:	200002d8 	.word	0x200002d8

080005f4 <catchBLE>:

void catchBLE(){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
      int result=fetchBleEvent(buffer,127);
 80005fa:	217f      	movs	r1, #127	; 0x7f
 80005fc:	480a      	ldr	r0, [pc, #40]	; (8000628 <catchBLE+0x34>)
 80005fe:	f7ff fefd 	bl	80003fc <fetchBleEvent>
 8000602:	6078      	str	r0, [r7, #4]
	  if(result==BLE_OK){
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d109      	bne.n	800061e <catchBLE+0x2a>
		  if(checkEventResp(buffer,EVENT_DISCONNECTED,3)==BLE_OK){
 800060a:	2203      	movs	r2, #3
 800060c:	4907      	ldr	r1, [pc, #28]	; (800062c <catchBLE+0x38>)
 800060e:	4806      	ldr	r0, [pc, #24]	; (8000628 <catchBLE+0x34>)
 8000610:	f7ff ff7e 	bl	8000510 <checkEventResp>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d101      	bne.n	800061e <catchBLE+0x2a>
			  setConnectable();
 800061a:	f000 f809 	bl	8000630 <setConnectable>
		  }
	  }else{
		  //something bad is happening if I am here
	  }
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	200001b4 	.word	0x200001b4
 800062c:	200000e8 	.word	0x200000e8

08000630 <setConnectable>:

void setConnectable(){
 8000630:	b590      	push	{r4, r7, lr}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
	   uint8_t* rxEvent;
	   //Start advertising
	   uint8_t *localname;
	   int res;
	   localname=(uint8_t*)malloc(sizeof(deviceName)+5);//carattere di terminazione+listauid+slavetemp
 8000636:	200b      	movs	r0, #11
 8000638:	f002 fd68 	bl	800310c <malloc>
 800063c:	4603      	mov	r3, r0
 800063e:	60fb      	str	r3, [r7, #12]
	   memcpy(localname,deviceName,sizeof(deviceName));
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	4a35      	ldr	r2, [pc, #212]	; (8000718 <setConnectable+0xe8>)
 8000644:	6810      	ldr	r0, [r2, #0]
 8000646:	6018      	str	r0, [r3, #0]
 8000648:	8892      	ldrh	r2, [r2, #4]
 800064a:	809a      	strh	r2, [r3, #4]
	   localname[sizeof(deviceName)+1]=0x00;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3307      	adds	r3, #7
 8000650:	2200      	movs	r2, #0
 8000652:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+2]=0x00;
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	3308      	adds	r3, #8
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+3]=0x00;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	3309      	adds	r3, #9
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)+4]=0x00;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	330a      	adds	r3, #10
 8000668:	2200      	movs	r2, #0
 800066a:	701a      	strb	r2, [r3, #0]
	   localname[sizeof(deviceName)]=0x00;
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	3306      	adds	r3, #6
 8000670:	2200      	movs	r2, #0
 8000672:	701a      	strb	r2, [r3, #0]


	   ACI_GAP_SET_DISCOVERABLE[11]=sizeof(deviceName)+1;
 8000674:	4b29      	ldr	r3, [pc, #164]	; (800071c <setConnectable+0xec>)
 8000676:	2207      	movs	r2, #7
 8000678:	72da      	strb	r2, [r3, #11]
	   ACI_GAP_SET_DISCOVERABLE[3]=sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE)-4;
 800067a:	4b28      	ldr	r3, [pc, #160]	; (800071c <setConnectable+0xec>)
 800067c:	2214      	movs	r2, #20
 800067e:	70da      	strb	r2, [r3, #3]

	   uint8_t *discoverableCommand;
	   discoverableCommand=(uint8_t*)malloc(sizeof(ACI_GAP_SET_DISCOVERABLE)+sizeof(deviceName)+5);
 8000680:	2018      	movs	r0, #24
 8000682:	f002 fd43 	bl	800310c <malloc>
 8000686:	4603      	mov	r3, r0
 8000688:	60bb      	str	r3, [r7, #8]
	   memcpy(discoverableCommand,ACI_GAP_SET_DISCOVERABLE,sizeof(ACI_GAP_SET_DISCOVERABLE));
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	4a23      	ldr	r2, [pc, #140]	; (800071c <setConnectable+0xec>)
 800068e:	461c      	mov	r4, r3
 8000690:	4613      	mov	r3, r2
 8000692:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000694:	6020      	str	r0, [r4, #0]
 8000696:	6061      	str	r1, [r4, #4]
 8000698:	60a2      	str	r2, [r4, #8]
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	7323      	strb	r3, [r4, #12]
	   memcpy(discoverableCommand+sizeof(ACI_GAP_SET_DISCOVERABLE),localname,sizeof(deviceName)+5);
 800069e:	68bb      	ldr	r3, [r7, #8]
 80006a0:	330d      	adds	r3, #13
 80006a2:	220b      	movs	r2, #11
 80006a4:	68f9      	ldr	r1, [r7, #12]
 80006a6:	4618      	mov	r0, r3
 80006a8:	f002 fe30 	bl	800330c <memcpy>

	   sendCommand(discoverableCommand,sizeof(deviceName)+5+sizeof(ACI_GAP_SET_DISCOVERABLE));
 80006ac:	2118      	movs	r1, #24
 80006ae:	68b8      	ldr	r0, [r7, #8]
 80006b0:	f7ff ff54 	bl	800055c <sendCommand>
	   rxEvent=(uint8_t*)malloc(7);
 80006b4:	2007      	movs	r0, #7
 80006b6:	f002 fd29 	bl	800310c <malloc>
 80006ba:	4603      	mov	r3, r0
 80006bc:	607b      	str	r3, [r7, #4]
	   while(!dataAvailable);
 80006be:	bf00      	nop
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <setConnectable+0xf0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d0fb      	beq.n	80006c0 <setConnectable+0x90>
	   res=fetchBleEvent(rxEvent,7);
 80006c8:	2107      	movs	r1, #7
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff fe96 	bl	80003fc <fetchBleEvent>
 80006d0:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d10f      	bne.n	80006f8 <setConnectable+0xc8>
	   res=checkEventResp(rxEvent,ACI_GAP_SET_DISCOVERABLE_COMPLETE,7);
 80006d8:	2207      	movs	r2, #7
 80006da:	4912      	ldr	r1, [pc, #72]	; (8000724 <setConnectable+0xf4>)
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f7ff ff17 	bl	8000510 <checkEventResp>
 80006e2:	6038      	str	r0, [r7, #0]
	   if(res==BLE_OK){
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d106      	bne.n	80006f8 <setConnectable+0xc8>
		   stackInitCompleteFlag|=0x80;
 80006ea:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <setConnectable+0xf8>)
 80006ec:	881b      	ldrh	r3, [r3, #0]
 80006ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006f2:	b29a      	uxth	r2, r3
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <setConnectable+0xf8>)
 80006f6:	801a      	strh	r2, [r3, #0]
	   }
	   }

	   free(rxEvent);
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f002 fd0f 	bl	800311c <free>
	   free(discoverableCommand);
 80006fe:	68b8      	ldr	r0, [r7, #8]
 8000700:	f002 fd0c 	bl	800311c <free>
	   free(localname);
 8000704:	68f8      	ldr	r0, [r7, #12]
 8000706:	f002 fd09 	bl	800311c <free>
	   HAL_Delay(10);
 800070a:	200a      	movs	r0, #10
 800070c:	f000 fe00 	bl	8001310 <HAL_Delay>
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	bd90      	pop	{r4, r7, pc}
 8000718:	200000ec 	.word	0x200000ec
 800071c:	20000078 	.word	0x20000078
 8000720:	200002d8 	.word	0x200002d8
 8000724:	20000088 	.word	0x20000088
 8000728:	200002be 	.word	0x200002be

0800072c <BLE_command>:

int BLE_command(uint8_t* command, int size, uint8_t* result, int sizeRes, int returnHandles){
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	60b9      	str	r1, [r7, #8]
 8000736:	607a      	str	r2, [r7, #4]
 8000738:	603b      	str	r3, [r7, #0]
	   int response;

	   sendCommand(command,size);
 800073a:	68b9      	ldr	r1, [r7, #8]
 800073c:	68f8      	ldr	r0, [r7, #12]
 800073e:	f7ff ff0d 	bl	800055c <sendCommand>
	   rxEvent=(uint8_t*)malloc(sizeRes+2*returnHandles);
 8000742:	6a3b      	ldr	r3, [r7, #32]
 8000744:	005a      	lsls	r2, r3, #1
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	4413      	add	r3, r2
 800074a:	4618      	mov	r0, r3
 800074c:	f002 fcde 	bl	800310c <malloc>
 8000750:	4603      	mov	r3, r0
 8000752:	461a      	mov	r2, r3
 8000754:	4b19      	ldr	r3, [pc, #100]	; (80007bc <BLE_command+0x90>)
 8000756:	601a      	str	r2, [r3, #0]

	   long contatore=0;
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800075c:	e007      	b.n	800076e <BLE_command+0x42>
		   contatore++;
 800075e:	693b      	ldr	r3, [r7, #16]
 8000760:	3301      	adds	r3, #1
 8000762:	613b      	str	r3, [r7, #16]
		   if(contatore>30000){
 8000764:	693b      	ldr	r3, [r7, #16]
 8000766:	f247 5230 	movw	r2, #30000	; 0x7530
 800076a:	4293      	cmp	r3, r2
 800076c:	dc07      	bgt.n	800077e <BLE_command+0x52>
	   while(!HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 800076e:	2140      	movs	r1, #64	; 0x40
 8000770:	4813      	ldr	r0, [pc, #76]	; (80007c0 <BLE_command+0x94>)
 8000772:	f001 f8ad 	bl	80018d0 <HAL_GPIO_ReadPin>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d0f0      	beq.n	800075e <BLE_command+0x32>
 800077c:	e000      	b.n	8000780 <BLE_command+0x54>
			   break;
 800077e:	bf00      	nop
		   }
	   }


	   response=fetchBleEvent(rxEvent,sizeRes+returnHandles*2);
 8000780:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <BLE_command+0x90>)
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	6a3b      	ldr	r3, [r7, #32]
 8000786:	005a      	lsls	r2, r3, #1
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	4413      	add	r3, r2
 800078c:	4619      	mov	r1, r3
 800078e:	f7ff fe35 	bl	80003fc <fetchBleEvent>
 8000792:	6178      	str	r0, [r7, #20]
	   if(response==BLE_OK){
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	2b00      	cmp	r3, #0
 8000798:	d107      	bne.n	80007aa <BLE_command+0x7e>
		   response=checkEventResp(rxEvent,result,sizeRes);
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <BLE_command+0x90>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	683a      	ldr	r2, [r7, #0]
 80007a0:	6879      	ldr	r1, [r7, #4]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f7ff feb4 	bl	8000510 <checkEventResp>
 80007a8:	6178      	str	r0, [r7, #20]
	   }
	   HAL_Delay(10);
 80007aa:	200a      	movs	r0, #10
 80007ac:	f000 fdb0 	bl	8001310 <HAL_Delay>


	return response;
 80007b0:	697b      	ldr	r3, [r7, #20]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3718      	adds	r7, #24
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200002c0 	.word	0x200002c0
 80007c0:	48001000 	.word	0x48001000

080007c4 <addService>:

void addService(uint8_t* UUID, uint8_t* handle, int attributes){
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af02      	add	r7, sp, #8
 80007ca:	60f8      	str	r0, [r7, #12]
 80007cc:	60b9      	str	r1, [r7, #8]
 80007ce:	607a      	str	r2, [r7, #4]


	//memcpy
	memcpy(ADD_PRIMARY_SERVICE+5,UUID,16);
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <addService+0x60>)
 80007d2:	2210      	movs	r2, #16
 80007d4:	68f9      	ldr	r1, [r7, #12]
 80007d6:	4618      	mov	r0, r3
 80007d8:	f002 fd98 	bl	800330c <memcpy>
    ADD_PRIMARY_SERVICE[22]=attributes;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <addService+0x64>)
 80007e2:	759a      	strb	r2, [r3, #22]
	   if(BLE_command(ADD_PRIMARY_SERVICE,sizeof(ADD_PRIMARY_SERVICE),ADD_PRIMARY_SERVICE_COMPLETE,sizeof(ADD_PRIMARY_SERVICE_COMPLETE),1)==BLE_OK){
 80007e4:	2301      	movs	r3, #1
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	2307      	movs	r3, #7
 80007ea:	4a10      	ldr	r2, [pc, #64]	; (800082c <addService+0x68>)
 80007ec:	2117      	movs	r1, #23
 80007ee:	480e      	ldr	r0, [pc, #56]	; (8000828 <addService+0x64>)
 80007f0:	f7ff ff9c 	bl	800072c <BLE_command>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d10a      	bne.n	8000810 <addService+0x4c>
		   handle[0]=rxEvent[7];
 80007fa:	4b0d      	ldr	r3, [pc, #52]	; (8000830 <addService+0x6c>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	79da      	ldrb	r2, [r3, #7]
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	701a      	strb	r2, [r3, #0]
		   handle[1]=rxEvent[8];
 8000804:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <addService+0x6c>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	3301      	adds	r3, #1
 800080c:	7a12      	ldrb	r2, [r2, #8]
 800080e:	701a      	strb	r2, [r3, #0]
	    }
	   free(rxEvent);
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <addService+0x6c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	4618      	mov	r0, r3
 8000816:	f002 fc81 	bl	800311c <free>
}
 800081a:	bf00      	nop
 800081c:	3710      	adds	r7, #16
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000095 	.word	0x20000095
 8000828:	20000090 	.word	0x20000090
 800082c:	200000a8 	.word	0x200000a8
 8000830:	200002c0 	.word	0x200002c0

08000834 <addCharacteristic>:

void addCharacteristic(uint8_t* UUID,uint8_t* handleChar, uint8_t* handleService, uint8_t maxsize, uint8_t proprieties){
 8000834:	b580      	push	{r7, lr}
 8000836:	b086      	sub	sp, #24
 8000838:	af02      	add	r7, sp, #8
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
 8000840:	70fb      	strb	r3, [r7, #3]
    memcpy(ADD_CUSTOM_CHAR+7,UUID,16);
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <addCharacteristic+0x74>)
 8000844:	2210      	movs	r2, #16
 8000846:	68f9      	ldr	r1, [r7, #12]
 8000848:	4618      	mov	r0, r3
 800084a:	f002 fd5f 	bl	800330c <memcpy>

	ADD_CUSTOM_CHAR[4]= handleService[0];
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	781a      	ldrb	r2, [r3, #0]
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <addCharacteristic+0x78>)
 8000854:	711a      	strb	r2, [r3, #4]
	ADD_CUSTOM_CHAR[5]= handleService[1];
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	785a      	ldrb	r2, [r3, #1]
 800085a:	4b14      	ldr	r3, [pc, #80]	; (80008ac <addCharacteristic+0x78>)
 800085c:	715a      	strb	r2, [r3, #5]
	ADD_CUSTOM_CHAR[23]= maxsize;
 800085e:	4a13      	ldr	r2, [pc, #76]	; (80008ac <addCharacteristic+0x78>)
 8000860:	78fb      	ldrb	r3, [r7, #3]
 8000862:	75d3      	strb	r3, [r2, #23]
	ADD_CUSTOM_CHAR[25]= proprieties;
 8000864:	4a11      	ldr	r2, [pc, #68]	; (80008ac <addCharacteristic+0x78>)
 8000866:	7e3b      	ldrb	r3, [r7, #24]
 8000868:	7653      	strb	r3, [r2, #25]
	if(BLE_command(ADD_CUSTOM_CHAR,sizeof(ADD_CUSTOM_CHAR),ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),1)==BLE_OK){
 800086a:	2301      	movs	r3, #1
 800086c:	9300      	str	r3, [sp, #0]
 800086e:	2307      	movs	r3, #7
 8000870:	4a0f      	ldr	r2, [pc, #60]	; (80008b0 <addCharacteristic+0x7c>)
 8000872:	211e      	movs	r1, #30
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <addCharacteristic+0x78>)
 8000876:	f7ff ff59 	bl	800072c <BLE_command>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d10a      	bne.n	8000896 <addCharacteristic+0x62>
        handleChar[0]=rxEvent[7];
 8000880:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <addCharacteristic+0x80>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	79da      	ldrb	r2, [r3, #7]
 8000886:	68bb      	ldr	r3, [r7, #8]
 8000888:	701a      	strb	r2, [r3, #0]
	    handleChar[1]=rxEvent[8];
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <addCharacteristic+0x80>)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	3301      	adds	r3, #1
 8000892:	7a12      	ldrb	r2, [r2, #8]
 8000894:	701a      	strb	r2, [r3, #0]
	}
	free(rxEvent);
 8000896:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <addCharacteristic+0x80>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4618      	mov	r0, r3
 800089c:	f002 fc3e 	bl	800311c <free>
}
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200000b7 	.word	0x200000b7
 80008ac:	200000b0 	.word	0x200000b0
 80008b0:	200000d0 	.word	0x200000d0
 80008b4:	200002c0 	.word	0x200002c0

080008b8 <updateCharValue>:

void updateCharValue(uint8_t* handleService,uint8_t* handleChar, int offset, int size,uint8_t* data){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af02      	add	r7, sp, #8
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
 80008c4:	603b      	str	r3, [r7, #0]
	UPDATE_CHAR[3]=size+6;
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	3306      	adds	r3, #6
 80008cc:	b2da      	uxtb	r2, r3
 80008ce:	4b21      	ldr	r3, [pc, #132]	; (8000954 <updateCharValue+0x9c>)
 80008d0:	70da      	strb	r2, [r3, #3]
	UPDATE_CHAR[4]=handleService[0];
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	781a      	ldrb	r2, [r3, #0]
 80008d6:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <updateCharValue+0x9c>)
 80008d8:	711a      	strb	r2, [r3, #4]
	UPDATE_CHAR[5]=handleService[1];
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	785a      	ldrb	r2, [r3, #1]
 80008de:	4b1d      	ldr	r3, [pc, #116]	; (8000954 <updateCharValue+0x9c>)
 80008e0:	715a      	strb	r2, [r3, #5]
	UPDATE_CHAR[6]=handleChar[0];
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	781a      	ldrb	r2, [r3, #0]
 80008e6:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <updateCharValue+0x9c>)
 80008e8:	719a      	strb	r2, [r3, #6]
	UPDATE_CHAR[7]=handleChar[1];
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	785a      	ldrb	r2, [r3, #1]
 80008ee:	4b19      	ldr	r3, [pc, #100]	; (8000954 <updateCharValue+0x9c>)
 80008f0:	71da      	strb	r2, [r3, #7]
	UPDATE_CHAR[8]=offset;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	b2da      	uxtb	r2, r3
 80008f6:	4b17      	ldr	r3, [pc, #92]	; (8000954 <updateCharValue+0x9c>)
 80008f8:	721a      	strb	r2, [r3, #8]
	UPDATE_CHAR[9]=size;
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	b2da      	uxtb	r2, r3
 80008fe:	4b15      	ldr	r3, [pc, #84]	; (8000954 <updateCharValue+0x9c>)
 8000900:	725a      	strb	r2, [r3, #9]

	uint8_t* commandComplete;
	commandComplete=(uint8_t*)malloc(10+size);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	330a      	adds	r3, #10
 8000906:	4618      	mov	r0, r3
 8000908:	f002 fc00 	bl	800310c <malloc>
 800090c:	4603      	mov	r3, r0
 800090e:	617b      	str	r3, [r7, #20]
	memcpy(commandComplete,UPDATE_CHAR,10);
 8000910:	220a      	movs	r2, #10
 8000912:	4910      	ldr	r1, [pc, #64]	; (8000954 <updateCharValue+0x9c>)
 8000914:	6978      	ldr	r0, [r7, #20]
 8000916:	f002 fcf9 	bl	800330c <memcpy>
	memcpy(commandComplete+10,data,size);
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	330a      	adds	r3, #10
 800091e:	683a      	ldr	r2, [r7, #0]
 8000920:	6a39      	ldr	r1, [r7, #32]
 8000922:	4618      	mov	r0, r3
 8000924:	f002 fcf2 	bl	800330c <memcpy>

	BLE_command(commandComplete,10+size,ADD_CUSTOM_CHAR_COMPLETE,sizeof(ADD_CUSTOM_CHAR_COMPLETE),0);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	f103 010a 	add.w	r1, r3, #10
 800092e:	2300      	movs	r3, #0
 8000930:	9300      	str	r3, [sp, #0]
 8000932:	2307      	movs	r3, #7
 8000934:	4a08      	ldr	r2, [pc, #32]	; (8000958 <updateCharValue+0xa0>)
 8000936:	6978      	ldr	r0, [r7, #20]
 8000938:	f7ff fef8 	bl	800072c <BLE_command>

	free(commandComplete);
 800093c:	6978      	ldr	r0, [r7, #20]
 800093e:	f002 fbed 	bl	800311c <free>
	free(rxEvent);
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <updateCharValue+0xa4>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4618      	mov	r0, r3
 8000948:	f002 fbe8 	bl	800311c <free>
}
 800094c:	bf00      	nop
 800094e:	3718      	adds	r7, #24
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	200000d8 	.word	0x200000d8
 8000958:	200000d0 	.word	0x200000d0
 800095c:	200002c0 	.word	0x200002c0

08000960 <i2c_transaction>:
//    I2C2->CR2 |= I2C_CR2_HEAD10R; // 7 bit addressing standard; address --> dir bit
}

// for sending less than 255 bytes
uint8_t i2c_transaction(uint8_t address, uint8_t dir, uint8_t* data, uint8_t len)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	603a      	str	r2, [r7, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	460b      	mov	r3, r1
 8000970:	71bb      	strb	r3, [r7, #6]
 8000972:	4613      	mov	r3, r2
 8000974:	717b      	strb	r3, [r7, #5]


    	// set read/write, addressing, secondary slave address, nbytes, reload=0, auto end=1, start
//    I2C2->CR2 |= (0x00 << I2C_CR2_RD_WRN_Pos) | (0x00 << I2C_CR2_ADD10_Pos) | (address << 0x01)|
//    		(len << I2C_CR2_NBYTES_Pos) | (I2C_CR2_START) | (I2C_CR2_AUTOEND);
    if (dir == 0){
 8000976:	79bb      	ldrb	r3, [r7, #6]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d125      	bne.n	80009c8 <i2c_transaction+0x68>
    	// write 1 byte register address, 1 byte data
        I2C2->CR2 |= (0x00 << I2C_CR2_RD_WRN_Pos) | (0x00 << I2C_CR2_ADD10_Pos) | (address << 0x01)|
 800097c:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <i2c_transaction+0xcc>)
 800097e:	685b      	ldr	r3, [r3, #4]
 8000980:	79fa      	ldrb	r2, [r7, #7]
 8000982:	0051      	lsls	r1, r2, #1
        		(len << I2C_CR2_NBYTES_Pos) | (I2C_CR2_START) | (I2C_CR2_AUTOEND);
 8000984:	797a      	ldrb	r2, [r7, #5]
 8000986:	0412      	lsls	r2, r2, #16
        I2C2->CR2 |= (0x00 << I2C_CR2_RD_WRN_Pos) | (0x00 << I2C_CR2_ADD10_Pos) | (address << 0x01)|
 8000988:	430a      	orrs	r2, r1
 800098a:	4313      	orrs	r3, r2
 800098c:	4a27      	ldr	r2, [pc, #156]	; (8000a2c <i2c_transaction+0xcc>)
 800098e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000992:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000996:	6053      	str	r3, [r2, #4]
    	for (uint8_t i = 0; i < len; i++) {
 8000998:	2300      	movs	r3, #0
 800099a:	73fb      	strb	r3, [r7, #15]
 800099c:	e00f      	b.n	80009be <i2c_transaction+0x5e>
        	while ((I2C2->ISR & I2C_ISR_TXIS) != I2C_ISR_TXIS);
 800099e:	bf00      	nop
 80009a0:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <i2c_transaction+0xcc>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d1f9      	bne.n	80009a0 <i2c_transaction+0x40>
    		I2C2->TXDR = data[i];
 80009ac:	7bfb      	ldrb	r3, [r7, #15]
 80009ae:	683a      	ldr	r2, [r7, #0]
 80009b0:	4413      	add	r3, r2
 80009b2:	781a      	ldrb	r2, [r3, #0]
 80009b4:	4b1d      	ldr	r3, [pc, #116]	; (8000a2c <i2c_transaction+0xcc>)
 80009b6:	629a      	str	r2, [r3, #40]	; 0x28
    	for (uint8_t i = 0; i < len; i++) {
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	3301      	adds	r3, #1
 80009bc:	73fb      	strb	r3, [r7, #15]
 80009be:	7bfa      	ldrb	r2, [r7, #15]
 80009c0:	797b      	ldrb	r3, [r7, #5]
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d3eb      	bcc.n	800099e <i2c_transaction+0x3e>
 80009c6:	e02a      	b.n	8000a1e <i2c_transaction+0xbe>
    		}
    } else if (dir == 1){
 80009c8:	79bb      	ldrb	r3, [r7, #6]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d127      	bne.n	8000a1e <i2c_transaction+0xbe>
//    	while ((I2C2->ISR & I2C_ISR_TXIS) != I2C_ISR_TXIS);
//    	I2C2->TXDR = data[0];

    	// did not follow Texas instruments guide; also need to reset bits before setting in each read/write

    	I2C2->CR2 |= (0x01 << I2C_CR2_RD_WRN_Pos) | (0x00 << I2C_CR2_ADD10_Pos) | (address << 0x01)|
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <i2c_transaction+0xcc>)
 80009d0:	685b      	ldr	r3, [r3, #4]
 80009d2:	79fa      	ldrb	r2, [r7, #7]
 80009d4:	0052      	lsls	r2, r2, #1
 80009d6:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
    	    		(len << I2C_CR2_NBYTES_Pos) | (I2C_CR2_START) | (I2C_CR2_AUTOEND);
 80009da:	797a      	ldrb	r2, [r7, #5]
 80009dc:	0412      	lsls	r2, r2, #16
    	I2C2->CR2 |= (0x01 << I2C_CR2_RD_WRN_Pos) | (0x00 << I2C_CR2_ADD10_Pos) | (address << 0x01)|
 80009de:	430a      	orrs	r2, r1
 80009e0:	4313      	orrs	r3, r2
 80009e2:	4a12      	ldr	r2, [pc, #72]	; (8000a2c <i2c_transaction+0xcc>)
 80009e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009ec:	6053      	str	r3, [r2, #4]

    	// read 2 bytes?
    	for (uint8_t i = 0; i < len; i++){
 80009ee:	2300      	movs	r3, #0
 80009f0:	73bb      	strb	r3, [r7, #14]
 80009f2:	e010      	b.n	8000a16 <i2c_transaction+0xb6>
    		while ((I2C2->ISR & I2C_ISR_RXNE) != I2C_ISR_RXNE);
 80009f4:	bf00      	nop
 80009f6:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <i2c_transaction+0xcc>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	2b04      	cmp	r3, #4
 8000a00:	d1f9      	bne.n	80009f6 <i2c_transaction+0x96>
    		data[i] = I2C2 -> RXDR;
 8000a02:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <i2c_transaction+0xcc>)
 8000a04:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000a06:	7bbb      	ldrb	r3, [r7, #14]
 8000a08:	683a      	ldr	r2, [r7, #0]
 8000a0a:	4413      	add	r3, r2
 8000a0c:	b2ca      	uxtb	r2, r1
 8000a0e:	701a      	strb	r2, [r3, #0]
    	for (uint8_t i = 0; i < len; i++){
 8000a10:	7bbb      	ldrb	r3, [r7, #14]
 8000a12:	3301      	adds	r3, #1
 8000a14:	73bb      	strb	r3, [r7, #14]
 8000a16:	7bba      	ldrb	r2, [r7, #14]
 8000a18:	797b      	ldrb	r3, [r7, #5]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d3ea      	bcc.n	80009f4 <i2c_transaction+0x94>
    	}

    }
}
 8000a1e:	bf00      	nop
 8000a20:	4618      	mov	r0, r3
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	40005800 	.word	0x40005800

08000a30 <leds_set>:

}


void leds_set(uint8_t led)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
  // Check if rightmost bit is set to 1
  if (led & 0x01) {
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	f003 0301 	and.w	r3, r3, #1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d008      	beq.n	8000a56 <leds_set+0x26>
	  GPIOA->ODR |= GPIO_ODR_OD5; // Turn on LED1 (set bit 5)
 8000a44:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a48:	695b      	ldr	r3, [r3, #20]
 8000a4a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a4e:	f043 0320 	orr.w	r3, r3, #32
 8000a52:	6153      	str	r3, [r2, #20]
 8000a54:	e007      	b.n	8000a66 <leds_set+0x36>
  } else {
	  GPIOA->ODR &= ~GPIO_ODR_OD5; // Turn off LED1 (clear bit 5)
 8000a56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000a5a:	695b      	ldr	r3, [r3, #20]
 8000a5c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000a60:	f023 0320 	bic.w	r3, r3, #32
 8000a64:	6153      	str	r3, [r2, #20]
  }

  // Check if next rightmost bit is set to 1
  if (led & 0x02) {
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	f003 0302 	and.w	r3, r3, #2
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d006      	beq.n	8000a7e <leds_set+0x4e>
	  GPIOB->ODR |= GPIO_ODR_OD14; // Turn on LED2 (set bit 14 on GPIO B)
 8000a70:	4b09      	ldr	r3, [pc, #36]	; (8000a98 <leds_set+0x68>)
 8000a72:	695b      	ldr	r3, [r3, #20]
 8000a74:	4a08      	ldr	r2, [pc, #32]	; (8000a98 <leds_set+0x68>)
 8000a76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a7a:	6153      	str	r3, [r2, #20]
  } else {
	  GPIOB->ODR &= ~GPIO_ODR_OD14; // Turn off LED2 (clear bit 14 on GPIO B
  }
}
 8000a7c:	e005      	b.n	8000a8a <leds_set+0x5a>
	  GPIOB->ODR &= ~GPIO_ODR_OD14; // Turn off LED2 (clear bit 14 on GPIO B
 8000a7e:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <leds_set+0x68>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <leds_set+0x68>)
 8000a84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000a88:	6153      	str	r3, [r2, #20]
}
 8000a8a:	bf00      	nop
 8000a8c:	370c      	adds	r7, #12
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	48000400 	.word	0x48000400

08000a9c <lsm6dsl_read_xyz>:
}




void lsm6dsl_read_xyz(int16_t* x, int16_t* y, int16_t* z){
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08c      	sub	sp, #48	; 0x30
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	60f8      	str	r0, [r7, #12]
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]

	uint8_t OUTX_L_XL = 0x28;
 8000aa8:	2328      	movs	r3, #40	; 0x28
 8000aaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t OUTX_H_XL = 0x29;
 8000aae:	2329      	movs	r3, #41	; 0x29
 8000ab0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	uint8_t OUTY_L_XL = 0x2A;
 8000ab4:	232a      	movs	r3, #42	; 0x2a
 8000ab6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t OUTY_H_XL = 0x2B;
 8000aba:	232b      	movs	r3, #43	; 0x2b
 8000abc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint8_t OUTZ_L_XL = 0x2C;
 8000ac0:	232c      	movs	r3, #44	; 0x2c
 8000ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t OUTZ_H_XL = 0x2D;
 8000ac6:	232d      	movs	r3, #45	; 0x2d
 8000ac8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	uint8_t xL[1] = {OUTX_L_XL};
 8000acc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ad0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	uint8_t xH[1] = {OUTX_H_XL};
 8000ad4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000ad8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t yL[1] = {OUTY_L_XL};
 8000adc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8000ae0:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t yH[1] = {OUTY_H_XL};
 8000ae4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000ae8:	773b      	strb	r3, [r7, #28]
	uint8_t zL[1] = {OUTZ_L_XL};
 8000aea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000aee:	763b      	strb	r3, [r7, #24]
	uint8_t zH[1] = {OUTZ_H_XL};
 8000af0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000af4:	753b      	strb	r3, [r7, #20]

	// read accelerometer data
	i2c_transaction(accelerometer, 0x01, xL, 0x01);
 8000af6:	4b29      	ldr	r3, [pc, #164]	; (8000b9c <lsm6dsl_read_xyz+0x100>)
 8000af8:	7818      	ldrb	r0, [r3, #0]
 8000afa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000afe:	2301      	movs	r3, #1
 8000b00:	2101      	movs	r1, #1
 8000b02:	f7ff ff2d 	bl	8000960 <i2c_transaction>
	i2c_transaction(accelerometer, 0x01, xH, 0x01);
 8000b06:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <lsm6dsl_read_xyz+0x100>)
 8000b08:	7818      	ldrb	r0, [r3, #0]
 8000b0a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000b0e:	2301      	movs	r3, #1
 8000b10:	2101      	movs	r1, #1
 8000b12:	f7ff ff25 	bl	8000960 <i2c_transaction>
	i2c_transaction(accelerometer, 0x01, yL, 0x01);
 8000b16:	4b21      	ldr	r3, [pc, #132]	; (8000b9c <lsm6dsl_read_xyz+0x100>)
 8000b18:	7818      	ldrb	r0, [r3, #0]
 8000b1a:	f107 0220 	add.w	r2, r7, #32
 8000b1e:	2301      	movs	r3, #1
 8000b20:	2101      	movs	r1, #1
 8000b22:	f7ff ff1d 	bl	8000960 <i2c_transaction>
	i2c_transaction(accelerometer, 0x01, yH, 0x01);
 8000b26:	4b1d      	ldr	r3, [pc, #116]	; (8000b9c <lsm6dsl_read_xyz+0x100>)
 8000b28:	7818      	ldrb	r0, [r3, #0]
 8000b2a:	f107 021c 	add.w	r2, r7, #28
 8000b2e:	2301      	movs	r3, #1
 8000b30:	2101      	movs	r1, #1
 8000b32:	f7ff ff15 	bl	8000960 <i2c_transaction>
	i2c_transaction(accelerometer, 0x01, zL, 0x01);
 8000b36:	4b19      	ldr	r3, [pc, #100]	; (8000b9c <lsm6dsl_read_xyz+0x100>)
 8000b38:	7818      	ldrb	r0, [r3, #0]
 8000b3a:	f107 0218 	add.w	r2, r7, #24
 8000b3e:	2301      	movs	r3, #1
 8000b40:	2101      	movs	r1, #1
 8000b42:	f7ff ff0d 	bl	8000960 <i2c_transaction>
	i2c_transaction(accelerometer, 0x01, zH, 0x01);
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <lsm6dsl_read_xyz+0x100>)
 8000b48:	7818      	ldrb	r0, [r3, #0]
 8000b4a:	f107 0214 	add.w	r2, r7, #20
 8000b4e:	2301      	movs	r3, #1
 8000b50:	2101      	movs	r1, #1
 8000b52:	f7ff ff05 	bl	8000960 <i2c_transaction>

	// store values with type casting
	*x = (int16_t)(((uint16_t)xH[0] << 8) | xL[0]);
 8000b56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000b5a:	021b      	lsls	r3, r3, #8
 8000b5c:	b21a      	sxth	r2, r3
 8000b5e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b62:	b21b      	sxth	r3, r3
 8000b64:	4313      	orrs	r3, r2
 8000b66:	b21a      	sxth	r2, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	801a      	strh	r2, [r3, #0]
	*y = (int16_t)(((uint16_t)yH[0] << 8) | yL[0]);
 8000b6c:	7f3b      	ldrb	r3, [r7, #28]
 8000b6e:	021b      	lsls	r3, r3, #8
 8000b70:	b21a      	sxth	r2, r3
 8000b72:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b76:	b21b      	sxth	r3, r3
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	b21a      	sxth	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	801a      	strh	r2, [r3, #0]
	*z = (int16_t)(((uint16_t)zH[0] << 8) | zL[0]);
 8000b80:	7d3b      	ldrb	r3, [r7, #20]
 8000b82:	021b      	lsls	r3, r3, #8
 8000b84:	b21a      	sxth	r2, r3
 8000b86:	7e3b      	ldrb	r3, [r7, #24]
 8000b88:	b21b      	sxth	r3, r3
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	b21a      	sxth	r2, r3
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	801a      	strh	r2, [r3, #0]

}
 8000b92:	bf00      	nop
 8000b94:	3730      	adds	r7, #48	; 0x30
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000124 	.word	0x20000124

08000ba0 <TIM2_IRQHandler>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI3_Init(void);

void TIM2_IRQHandler()
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
	if (inplace == 1200) {
 8000ba4:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <TIM2_IRQHandler+0x90>)
 8000ba6:	881b      	ldrh	r3, [r3, #0]
 8000ba8:	b29b      	uxth	r3, r3
 8000baa:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000bae:	d135      	bne.n	8000c1c <TIM2_IRQHandler+0x7c>
		led1 = (pattern1 >> (11-cnt)) & 1;
 8000bb0:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <TIM2_IRQHandler+0x94>)
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <TIM2_IRQHandler+0x98>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f1c3 030b 	rsb	r3, r3, #11
 8000bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	4a1d      	ldr	r2, [pc, #116]	; (8000c3c <TIM2_IRQHandler+0x9c>)
 8000bc6:	6013      	str	r3, [r2, #0]
		led2 = (pattern2 >> (11-cnt)) & 1;
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <TIM2_IRQHandler+0xa0>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <TIM2_IRQHandler+0x98>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f1c3 030b 	rsb	r3, r3, #11
 8000bd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	4a19      	ldr	r2, [pc, #100]	; (8000c44 <TIM2_IRQHandler+0xa4>)
 8000bde:	6013      	str	r3, [r2, #0]

		leds_set((led2 << 1) + led1);
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <TIM2_IRQHandler+0xa4>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	005b      	lsls	r3, r3, #1
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <TIM2_IRQHandler+0x9c>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b2db      	uxtb	r3, r3
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f7ff ff1b 	bl	8000a30 <leds_set>

		if (cnt == 11) {cnt = 0;}
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <TIM2_IRQHandler+0x98>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b0b      	cmp	r3, #11
 8000c00:	d103      	bne.n	8000c0a <TIM2_IRQHandler+0x6a>
 8000c02:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <TIM2_IRQHandler+0x98>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	e004      	b.n	8000c14 <TIM2_IRQHandler+0x74>
		else{cnt += 1;}
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	; (8000c38 <TIM2_IRQHandler+0x98>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	4a09      	ldr	r2, [pc, #36]	; (8000c38 <TIM2_IRQHandler+0x98>)
 8000c12:	6013      	str	r3, [r2, #0]

		timer_reset(TIM2);
 8000c14:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c18:	f000 fac8 	bl	80011ac <timer_reset>
	}
	inplace++;
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <TIM2_IRQHandler+0x90>)
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	3301      	adds	r3, #1
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	4b02      	ldr	r3, [pc, #8]	; (8000c30 <TIM2_IRQHandler+0x90>)
 8000c28:	801a      	strh	r2, [r3, #0]

}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	200002d0 	.word	0x200002d0
 8000c34:	20000128 	.word	0x20000128
 8000c38:	200002c4 	.word	0x200002c4
 8000c3c:	200002c8 	.word	0x200002c8
 8000c40:	2000012c 	.word	0x2000012c
 8000c44:	200002cc 	.word	0x200002cc

08000c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c48:	b5b0      	push	{r4, r5, r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af02      	add	r7, sp, #8
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4e:	f000 faea 	bl	8001226 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000c52:	f000 f889 	bl	8000d68 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c56:	f000 f90b 	bl	8000e70 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000c5a:	f000 f8cb 	bl	8000df4 <MX_SPI3_Init>

  //RESET BLE MODULE
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c68:	f000 fe4a 	bl	8001900 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000c6c:	200a      	movs	r0, #10
 8000c6e:	f000 fb4f 	bl	8001310 <HAL_Delay>
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port,BLE_RESET_Pin,GPIO_PIN_SET);
 8000c72:	2201      	movs	r2, #1
 8000c74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c7c:	f000 fe40 	bl	8001900 <HAL_GPIO_WritePin>

  ble_init();
 8000c80:	f7ff faa2 	bl	80001c8 <ble_init>

  HAL_Delay(10);
 8000c84:	200a      	movs	r0, #10
 8000c86:	f000 fb43 	bl	8001310 <HAL_Delay>

  uint8_t standby = 0;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	75fb      	strb	r3, [r7, #23]

  while (1)
  {

	  // if lost
	  lsm6dsl_read_xyz(&x,&y,&z);
 8000c8e:	4a2e      	ldr	r2, [pc, #184]	; (8000d48 <main+0x100>)
 8000c90:	492e      	ldr	r1, [pc, #184]	; (8000d4c <main+0x104>)
 8000c92:	482f      	ldr	r0, [pc, #188]	; (8000d50 <main+0x108>)
 8000c94:	f7ff ff02 	bl	8000a9c <lsm6dsl_read_xyz>
	  if (x < 1024 && x > -1024 && y < 1024 && y > -1024 && z < 1024 && z > -1024) {
 8000c98:	4b2d      	ldr	r3, [pc, #180]	; (8000d50 <main+0x108>)
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	b21b      	sxth	r3, r3
 8000c9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ca2:	da28      	bge.n	8000cf6 <main+0xae>
 8000ca4:	4b2a      	ldr	r3, [pc, #168]	; (8000d50 <main+0x108>)
 8000ca6:	881b      	ldrh	r3, [r3, #0]
 8000ca8:	b21b      	sxth	r3, r3
 8000caa:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8000cae:	dd22      	ble.n	8000cf6 <main+0xae>
 8000cb0:	4b26      	ldr	r3, [pc, #152]	; (8000d4c <main+0x104>)
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	b21b      	sxth	r3, r3
 8000cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cba:	da1c      	bge.n	8000cf6 <main+0xae>
 8000cbc:	4b23      	ldr	r3, [pc, #140]	; (8000d4c <main+0x104>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	b21b      	sxth	r3, r3
 8000cc2:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8000cc6:	dd16      	ble.n	8000cf6 <main+0xae>
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	; (8000d48 <main+0x100>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	b21b      	sxth	r3, r3
 8000cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000cd2:	da10      	bge.n	8000cf6 <main+0xae>
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <main+0x100>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	f513 6f80 	cmn.w	r3, #1024	; 0x400
 8000cde:	dd0a      	ble.n	8000cf6 <main+0xae>
	  		  // prevent overflow from inplace incrementing
	  		  if (inplace > 1200) {
 8000ce0:	4b1c      	ldr	r3, [pc, #112]	; (8000d54 <main+0x10c>)
 8000ce2:	881b      	ldrh	r3, [r3, #0]
 8000ce4:	b29b      	uxth	r3, r3
 8000ce6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8000cea:	d907      	bls.n	8000cfc <main+0xb4>
	  			  inplace = 1200;
 8000cec:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <main+0x10c>)
 8000cee:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000cf2:	801a      	strh	r2, [r3, #0]
	  		  if (inplace > 1200) {
 8000cf4:	e002      	b.n	8000cfc <main+0xb4>
	  		  }
	  	  } else {
	  		  inplace = 0;
 8000cf6:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <main+0x10c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	801a      	strh	r2, [r3, #0]
	  	  }
	  //only send
	  if(!standby && HAL_GPIO_ReadPin(BLE_INT_GPIO_Port,BLE_INT_Pin)){
 8000cfc:	7dfb      	ldrb	r3, [r7, #23]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d109      	bne.n	8000d16 <main+0xce>
 8000d02:	2140      	movs	r1, #64	; 0x40
 8000d04:	4814      	ldr	r0, [pc, #80]	; (8000d58 <main+0x110>)
 8000d06:	f000 fde3 	bl	80018d0 <HAL_GPIO_ReadPin>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d002      	beq.n	8000d16 <main+0xce>
	    catchBLE();
 8000d10:	f7ff fc70 	bl	80005f4 <catchBLE>
 8000d14:	e016      	b.n	8000d44 <main+0xfc>
	  }else{
		  HAL_Delay(1000);
 8000d16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d1a:	f000 faf9 	bl	8001310 <HAL_Delay>

		  // Send a string to the NORDIC UART service, remember to not include the newline
		  unsigned char test_str[] = "youlostit BLE test";
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <main+0x114>)
 8000d20:	1d3c      	adds	r4, r7, #4
 8000d22:	461d      	mov	r5, r3
 8000d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d28:	682b      	ldr	r3, [r5, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	8022      	strh	r2, [r4, #0]
 8000d2e:	3402      	adds	r4, #2
 8000d30:	0c1b      	lsrs	r3, r3, #16
 8000d32:	7023      	strb	r3, [r4, #0]
		  updateCharValue(NORDIC_UART_SERVICE_HANDLE, READ_CHAR_HANDLE, 0, sizeof(test_str)-1, test_str);
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2312      	movs	r3, #18
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	4908      	ldr	r1, [pc, #32]	; (8000d60 <main+0x118>)
 8000d3e:	4809      	ldr	r0, [pc, #36]	; (8000d64 <main+0x11c>)
 8000d40:	f7ff fdba 	bl	80008b8 <updateCharValue>
	  lsm6dsl_read_xyz(&x,&y,&z);
 8000d44:	e7a3      	b.n	8000c8e <main+0x46>
 8000d46:	bf00      	nop
 8000d48:	200002d6 	.word	0x200002d6
 8000d4c:	200002d4 	.word	0x200002d4
 8000d50:	200002d2 	.word	0x200002d2
 8000d54:	200002d0 	.word	0x200002d0
 8000d58:	48001000 	.word	0x48001000
 8000d5c:	080033e8 	.word	0x080033e8
 8000d60:	200002bc 	.word	0x200002bc
 8000d64:	200002b4 	.word	0x200002b4

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b096      	sub	sp, #88	; 0x58
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	2244      	movs	r2, #68	; 0x44
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f002 fa84 	bl	8003284 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000d8a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d8e:	f000 fe01 	bl	8001994 <HAL_PWREx_ControlVoltageScaling>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d98:	f000 f902 	bl	8000fa0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d9c:	2310      	movs	r3, #16
 8000d9e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000da0:	2301      	movs	r3, #1
 8000da2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_7;
 8000da8:	2370      	movs	r3, #112	; 0x70
 8000daa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000dac:	2300      	movs	r3, #0
 8000dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4618      	mov	r0, r3
 8000db6:	f000 fe43 	bl	8001a40 <HAL_RCC_OscConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000dc0:	f000 f8ee 	bl	8000fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc4:	230f      	movs	r3, #15
 8000dc6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2100      	movs	r1, #0
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f001 fa0b 	bl	80021f8 <HAL_RCC_ClockConfig>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d001      	beq.n	8000dec <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000de8:	f000 f8da 	bl	8000fa0 <Error_Handler>
  }
}
 8000dec:	bf00      	nop
 8000dee:	3758      	adds	r7, #88	; 0x58
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000df8:	4b1b      	ldr	r3, [pc, #108]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000dfa:	4a1c      	ldr	r2, [pc, #112]	; (8000e6c <MX_SPI3_Init+0x78>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000dfe:	4b1a      	ldr	r3, [pc, #104]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e00:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000e04:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000e06:	4b18      	ldr	r3, [pc, #96]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e0c:	4b16      	ldr	r3, [pc, #88]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e0e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000e12:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e14:	4b14      	ldr	r3, [pc, #80]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e1a:	4b13      	ldr	r3, [pc, #76]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000e20:	4b11      	ldr	r3, [pc, #68]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e26:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e28:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e3a:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e42:	2207      	movs	r2, #7
 8000e44:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000e46:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e4c:	4b06      	ldr	r3, [pc, #24]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e4e:	2208      	movs	r2, #8
 8000e50:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000e52:	4805      	ldr	r0, [pc, #20]	; (8000e68 <MX_SPI3_Init+0x74>)
 8000e54:	f001 fbbc 	bl	80025d0 <HAL_SPI_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000e5e:	f000 f89f 	bl	8000fa0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200002dc 	.word	0x200002dc
 8000e6c:	40003c00 	.word	0x40003c00

08000e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08a      	sub	sp, #40	; 0x28
 8000e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	601a      	str	r2, [r3, #0]
 8000e7e:	605a      	str	r2, [r3, #4]
 8000e80:	609a      	str	r2, [r3, #8]
 8000e82:	60da      	str	r2, [r3, #12]
 8000e84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e86:	4b43      	ldr	r3, [pc, #268]	; (8000f94 <MX_GPIO_Init+0x124>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	4a42      	ldr	r2, [pc, #264]	; (8000f94 <MX_GPIO_Init+0x124>)
 8000e8c:	f043 0310 	orr.w	r3, r3, #16
 8000e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e92:	4b40      	ldr	r3, [pc, #256]	; (8000f94 <MX_GPIO_Init+0x124>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	f003 0310 	and.w	r3, r3, #16
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9e:	4b3d      	ldr	r3, [pc, #244]	; (8000f94 <MX_GPIO_Init+0x124>)
 8000ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea2:	4a3c      	ldr	r2, [pc, #240]	; (8000f94 <MX_GPIO_Init+0x124>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eaa:	4b3a      	ldr	r3, [pc, #232]	; (8000f94 <MX_GPIO_Init+0x124>)
 8000eac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb6:	4b37      	ldr	r3, [pc, #220]	; (8000f94 <MX_GPIO_Init+0x124>)
 8000eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eba:	4a36      	ldr	r2, [pc, #216]	; (8000f94 <MX_GPIO_Init+0x124>)
 8000ebc:	f043 0302 	orr.w	r3, r3, #2
 8000ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec2:	4b34      	ldr	r3, [pc, #208]	; (8000f94 <MX_GPIO_Init+0x124>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	f003 0302 	and.w	r3, r3, #2
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ece:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <MX_GPIO_Init+0x124>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	4a30      	ldr	r2, [pc, #192]	; (8000f94 <MX_GPIO_Init+0x124>)
 8000ed4:	f043 0308 	orr.w	r3, r3, #8
 8000ed8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eda:	4b2e      	ldr	r3, [pc, #184]	; (8000f94 <MX_GPIO_Init+0x124>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	f003 0308 	and.w	r3, r3, #8
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ee6:	4b2b      	ldr	r3, [pc, #172]	; (8000f94 <MX_GPIO_Init+0x124>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	4a2a      	ldr	r2, [pc, #168]	; (8000f94 <MX_GPIO_Init+0x124>)
 8000eec:	f043 0304 	orr.w	r3, r3, #4
 8000ef0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef2:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <MX_GPIO_Init+0x124>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	f003 0304 	and.w	r3, r3, #4
 8000efa:	603b      	str	r3, [r7, #0]
 8000efc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_LED1_GPIO_Port, GPIO_LED1_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2120      	movs	r1, #32
 8000f02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f06:	f000 fcfb 	bl	8001900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_CS_GPIO_Port, BLE_CS_Pin, GPIO_PIN_SET);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f10:	4821      	ldr	r0, [pc, #132]	; (8000f98 <MX_GPIO_Init+0x128>)
 8000f12:	f000 fcf5 	bl	8001900 <HAL_GPIO_WritePin>


  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RESET_GPIO_Port, BLE_RESET_Pin, GPIO_PIN_SET);
 8000f16:	2201      	movs	r2, #1
 8000f18:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f20:	f000 fcee 	bl	8001900 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 8000f24:	2340      	movs	r3, #64	; 0x40
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f28:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4818      	ldr	r0, [pc, #96]	; (8000f9c <MX_GPIO_Init+0x12c>)
 8000f3a:	f000 fb1f 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_LED1_Pin BLE_RESET_Pin */
  GPIO_InitStruct.Pin = GPIO_LED1_Pin|BLE_RESET_Pin;
 8000f3e:	f44f 7390 	mov.w	r3, #288	; 0x120
 8000f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f5a:	f000 fb0f 	bl	800157c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_CS_Pin */
  GPIO_InitStruct.Pin = BLE_CS_Pin;
 8000f5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLE_CS_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	4808      	ldr	r0, [pc, #32]	; (8000f98 <MX_GPIO_Init+0x128>)
 8000f78:	f000 fb00 	bl	800157c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2100      	movs	r1, #0
 8000f80:	2017      	movs	r0, #23
 8000f82:	f000 fac4 	bl	800150e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000f86:	2017      	movs	r0, #23
 8000f88:	f000 fadd 	bl	8001546 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f8c:	bf00      	nop
 8000f8e:	3728      	adds	r7, #40	; 0x28
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40021000 	.word	0x40021000
 8000f98:	48000c00 	.word	0x48000c00
 8000f9c:	48001000 	.word	0x48001000

08000fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa4:	b672      	cpsid	i
}
 8000fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <Error_Handler+0x8>
	...

08000fac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6613      	str	r3, [r2, #96]	; 0x60
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fce:	4a08      	ldr	r2, [pc, #32]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a17      	ldr	r2, [pc, #92]	; (8001070 <HAL_SPI_MspInit+0x7c>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d128      	bne.n	8001068 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <HAL_SPI_MspInit+0x80>)
 8001018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101a:	4a16      	ldr	r2, [pc, #88]	; (8001074 <HAL_SPI_MspInit+0x80>)
 800101c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001020:	6593      	str	r3, [r2, #88]	; 0x58
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <HAL_SPI_MspInit+0x80>)
 8001024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001026:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_SPI_MspInit+0x80>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	4a10      	ldr	r2, [pc, #64]	; (8001074 <HAL_SPI_MspInit+0x80>)
 8001034:	f043 0304 	orr.w	r3, r3, #4
 8001038:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_SPI_MspInit+0x80>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	f003 0304 	and.w	r3, r3, #4
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001046:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800104a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104c:	2302      	movs	r3, #2
 800104e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001050:	2300      	movs	r3, #0
 8001052:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2303      	movs	r3, #3
 8001056:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001058:	2306      	movs	r3, #6
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4619      	mov	r1, r3
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <HAL_SPI_MspInit+0x84>)
 8001064:	f000 fa8a 	bl	800157c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001068:	bf00      	nop
 800106a:	3728      	adds	r7, #40	; 0x28
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40003c00 	.word	0x40003c00
 8001074:	40021000 	.word	0x40021000
 8001078:	48000800 	.word	0x48000800

0800107c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001080:	e7fe      	b.n	8001080 <NMI_Handler+0x4>

08001082 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001086:	e7fe      	b.n	8001086 <HardFault_Handler+0x4>

08001088 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800108c:	e7fe      	b.n	800108c <MemManage_Handler+0x4>

0800108e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108e:	b480      	push	{r7}
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001092:	e7fe      	b.n	8001092 <BusFault_Handler+0x4>

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001098:	e7fe      	b.n	8001098 <UsageFault_Handler+0x4>

0800109a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010c8:	f000 f902 	bl	80012d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	bd80      	pop	{r7, pc}

080010d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
  dataAvailable=1;
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <EXTI9_5_IRQHandler+0x14>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLE_INT_Pin);
 80010da:	2040      	movs	r0, #64	; 0x40
 80010dc:	f000 fc28 	bl	8001930 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200002d8 	.word	0x200002d8

080010e8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <_sbrk+0x50>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d102      	bne.n	80010fe <_sbrk+0x16>
		heap_end = &end;
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <_sbrk+0x50>)
 80010fa:	4a10      	ldr	r2, [pc, #64]	; (800113c <_sbrk+0x54>)
 80010fc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80010fe:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <_sbrk+0x50>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001104:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <_sbrk+0x50>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4413      	add	r3, r2
 800110c:	466a      	mov	r2, sp
 800110e:	4293      	cmp	r3, r2
 8001110:	d907      	bls.n	8001122 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001112:	f002 f8cf 	bl	80032b4 <__errno>
 8001116:	4603      	mov	r3, r0
 8001118:	220c      	movs	r2, #12
 800111a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800111c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001120:	e006      	b.n	8001130 <_sbrk+0x48>
	}

	heap_end += incr;
 8001122:	4b05      	ldr	r3, [pc, #20]	; (8001138 <_sbrk+0x50>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4413      	add	r3, r2
 800112a:	4a03      	ldr	r2, [pc, #12]	; (8001138 <_sbrk+0x50>)
 800112c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	4618      	mov	r0, r3
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000340 	.word	0x20000340
 800113c:	20000490 	.word	0x20000490

08001140 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001144:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <SystemInit+0x64>)
 8001146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114a:	4a16      	ldr	r2, [pc, #88]	; (80011a4 <SystemInit+0x64>)
 800114c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001154:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <SystemInit+0x68>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a13      	ldr	r2, [pc, #76]	; (80011a8 <SystemInit+0x68>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001160:	4b11      	ldr	r3, [pc, #68]	; (80011a8 <SystemInit+0x68>)
 8001162:	2200      	movs	r2, #0
 8001164:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <SystemInit+0x68>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <SystemInit+0x68>)
 800116c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001170:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001174:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001176:	4b0c      	ldr	r3, [pc, #48]	; (80011a8 <SystemInit+0x68>)
 8001178:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800117c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <SystemInit+0x68>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a09      	ldr	r2, [pc, #36]	; (80011a8 <SystemInit+0x68>)
 8001184:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001188:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800118a:	4b07      	ldr	r3, [pc, #28]	; (80011a8 <SystemInit+0x68>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <SystemInit+0x64>)
 8001192:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001196:	609a      	str	r2, [r3, #8]
#endif
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00
 80011a8:	40021000 	.word	0x40021000

080011ac <timer_reset>:

	timer->CR1 |= TIM_CR1_CEN; // enable timer
}

void timer_reset(TIM_TypeDef* timer)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	timer->CNT = 0; //reset counter
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	; 0x24
	timer->SR &= ~TIM_SR_UIF; //reset update interrupt flag
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	691b      	ldr	r3, [r3, #16]
 80011be:	f023 0201 	bic.w	r2, r3, #1
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	611a      	str	r2, [r3, #16]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800120c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011d8:	f7ff ffb2 	bl	8001140 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011dc:	480c      	ldr	r0, [pc, #48]	; (8001210 <LoopForever+0x6>)
  ldr r1, =_edata
 80011de:	490d      	ldr	r1, [pc, #52]	; (8001214 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <LoopForever+0xe>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a0a      	ldr	r2, [pc, #40]	; (800121c <LoopForever+0x12>)
  ldr r4, =_ebss
 80011f4:	4c0a      	ldr	r4, [pc, #40]	; (8001220 <LoopForever+0x16>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001202:	f002 f85d 	bl	80032c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001206:	f7ff fd1f 	bl	8000c48 <main>

0800120a <LoopForever>:

LoopForever:
    b LoopForever
 800120a:	e7fe      	b.n	800120a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800120c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8001218:	08003444 	.word	0x08003444
  ldr r2, =_sbss
 800121c:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8001220:	20000490 	.word	0x20000490

08001224 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC1_2_IRQHandler>

08001226 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800122c:	2300      	movs	r3, #0
 800122e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001230:	2003      	movs	r0, #3
 8001232:	f000 f961 	bl	80014f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001236:	2000      	movs	r0, #0
 8001238:	f000 f80e 	bl	8001258 <HAL_InitTick>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d002      	beq.n	8001248 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	71fb      	strb	r3, [r7, #7]
 8001246:	e001      	b.n	800124c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001248:	f7ff feb0 	bl	8000fac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800124c:	79fb      	ldrb	r3, [r7, #7]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
	...

08001258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001264:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <HAL_InitTick+0x6c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d023      	beq.n	80012b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <HAL_InitTick+0x70>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <HAL_InitTick+0x6c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f96d 	bl	8001562 <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10f      	bne.n	80012ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d809      	bhi.n	80012a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800129c:	f000 f937 	bl	800150e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012a0:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <HAL_InitTick+0x74>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e007      	b.n	80012b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e004      	b.n	80012b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	e001      	b.n	80012b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000138 	.word	0x20000138
 80012c8:	20000130 	.word	0x20000130
 80012cc:	20000134 	.word	0x20000134

080012d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_IncTick+0x20>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_IncTick+0x24>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <HAL_IncTick+0x24>)
 80012e2:	6013      	str	r3, [r2, #0]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000138 	.word	0x20000138
 80012f4:	20000344 	.word	0x20000344

080012f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return uwTick;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <HAL_GetTick+0x14>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000344 	.word	0x20000344

08001310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001318:	f7ff ffee 	bl	80012f8 <HAL_GetTick>
 800131c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001328:	d005      	beq.n	8001336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <HAL_Delay+0x44>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4413      	add	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001336:	bf00      	nop
 8001338:	f7ff ffde 	bl	80012f8 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	429a      	cmp	r2, r3
 8001346:	d8f7      	bhi.n	8001338 <HAL_Delay+0x28>
  {
  }
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000138 	.word	0x20000138

08001358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <__NVIC_SetPriorityGrouping+0x44>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001374:	4013      	ands	r3, r2
 8001376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001380:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138a:	4a04      	ldr	r2, [pc, #16]	; (800139c <__NVIC_SetPriorityGrouping+0x44>)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	60d3      	str	r3, [r2, #12]
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <__NVIC_GetPriorityGrouping+0x18>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	0a1b      	lsrs	r3, r3, #8
 80013aa:	f003 0307 	and.w	r3, r3, #7
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	db0b      	blt.n	80013e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	f003 021f 	and.w	r2, r3, #31
 80013d4:	4907      	ldr	r1, [pc, #28]	; (80013f4 <__NVIC_EnableIRQ+0x38>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	095b      	lsrs	r3, r3, #5
 80013dc:	2001      	movs	r0, #1
 80013de:	fa00 f202 	lsl.w	r2, r0, r2
 80013e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000e100 	.word	0xe000e100

080013f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	db0a      	blt.n	8001422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	490c      	ldr	r1, [pc, #48]	; (8001444 <__NVIC_SetPriority+0x4c>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	0112      	lsls	r2, r2, #4
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	440b      	add	r3, r1
 800141c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001420:	e00a      	b.n	8001438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4908      	ldr	r1, [pc, #32]	; (8001448 <__NVIC_SetPriority+0x50>)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	3b04      	subs	r3, #4
 8001430:	0112      	lsls	r2, r2, #4
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	440b      	add	r3, r1
 8001436:	761a      	strb	r2, [r3, #24]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000e100 	.word	0xe000e100
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	; 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f1c3 0307 	rsb	r3, r3, #7
 8001466:	2b04      	cmp	r3, #4
 8001468:	bf28      	it	cs
 800146a:	2304      	movcs	r3, #4
 800146c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3304      	adds	r3, #4
 8001472:	2b06      	cmp	r3, #6
 8001474:	d902      	bls.n	800147c <NVIC_EncodePriority+0x30>
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3b03      	subs	r3, #3
 800147a:	e000      	b.n	800147e <NVIC_EncodePriority+0x32>
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	401a      	ands	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001494:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	43d9      	mvns	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	4313      	orrs	r3, r2
         );
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3724      	adds	r7, #36	; 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c4:	d301      	bcc.n	80014ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00f      	b.n	80014ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ca:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <SysTick_Config+0x40>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d2:	210f      	movs	r1, #15
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014d8:	f7ff ff8e 	bl	80013f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <SysTick_Config+0x40>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e2:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <SysTick_Config+0x40>)
 80014e4:	2207      	movs	r2, #7
 80014e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	e000e010 	.word	0xe000e010

080014f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff29 	bl	8001358 <__NVIC_SetPriorityGrouping>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001520:	f7ff ff3e 	bl	80013a0 <__NVIC_GetPriorityGrouping>
 8001524:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	6978      	ldr	r0, [r7, #20]
 800152c:	f7ff ff8e 	bl	800144c <NVIC_EncodePriority>
 8001530:	4602      	mov	r2, r0
 8001532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001536:	4611      	mov	r1, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff5d 	bl	80013f8 <__NVIC_SetPriority>
}
 800153e:	bf00      	nop
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff31 	bl	80013bc <__NVIC_EnableIRQ>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff ffa2 	bl	80014b4 <SysTick_Config>
 8001570:	4603      	mov	r3, r0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800158a:	e17f      	b.n	800188c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	2101      	movs	r1, #1
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	fa01 f303 	lsl.w	r3, r1, r3
 8001598:	4013      	ands	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 8171 	beq.w	8001886 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f003 0303 	and.w	r3, r3, #3
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d005      	beq.n	80015bc <HAL_GPIO_Init+0x40>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0303 	and.w	r3, r3, #3
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d130      	bne.n	800161e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	2203      	movs	r2, #3
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	43db      	mvns	r3, r3
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015f2:	2201      	movs	r2, #1
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	091b      	lsrs	r3, r3, #4
 8001608:	f003 0201 	and.w	r2, r3, #1
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	2b03      	cmp	r3, #3
 8001628:	d118      	bne.n	800165c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001630:	2201      	movs	r2, #1
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	08db      	lsrs	r3, r3, #3
 8001646:	f003 0201 	and.w	r2, r3, #1
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b03      	cmp	r3, #3
 8001666:	d017      	beq.n	8001698 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d123      	bne.n	80016ec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	08da      	lsrs	r2, r3, #3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3208      	adds	r2, #8
 80016ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	220f      	movs	r2, #15
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4013      	ands	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	08da      	lsrs	r2, r3, #3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3208      	adds	r2, #8
 80016e6:	6939      	ldr	r1, [r7, #16]
 80016e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2203      	movs	r2, #3
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0203 	and.w	r2, r3, #3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80ac 	beq.w	8001886 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172e:	4b5f      	ldr	r3, [pc, #380]	; (80018ac <HAL_GPIO_Init+0x330>)
 8001730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001732:	4a5e      	ldr	r2, [pc, #376]	; (80018ac <HAL_GPIO_Init+0x330>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6613      	str	r3, [r2, #96]	; 0x60
 800173a:	4b5c      	ldr	r3, [pc, #368]	; (80018ac <HAL_GPIO_Init+0x330>)
 800173c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001746:	4a5a      	ldr	r2, [pc, #360]	; (80018b0 <HAL_GPIO_Init+0x334>)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	089b      	lsrs	r3, r3, #2
 800174c:	3302      	adds	r3, #2
 800174e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001752:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	220f      	movs	r2, #15
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	4013      	ands	r3, r2
 8001768:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001770:	d025      	beq.n	80017be <HAL_GPIO_Init+0x242>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a4f      	ldr	r2, [pc, #316]	; (80018b4 <HAL_GPIO_Init+0x338>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d01f      	beq.n	80017ba <HAL_GPIO_Init+0x23e>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a4e      	ldr	r2, [pc, #312]	; (80018b8 <HAL_GPIO_Init+0x33c>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d019      	beq.n	80017b6 <HAL_GPIO_Init+0x23a>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a4d      	ldr	r2, [pc, #308]	; (80018bc <HAL_GPIO_Init+0x340>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d013      	beq.n	80017b2 <HAL_GPIO_Init+0x236>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a4c      	ldr	r2, [pc, #304]	; (80018c0 <HAL_GPIO_Init+0x344>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d00d      	beq.n	80017ae <HAL_GPIO_Init+0x232>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4b      	ldr	r2, [pc, #300]	; (80018c4 <HAL_GPIO_Init+0x348>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d007      	beq.n	80017aa <HAL_GPIO_Init+0x22e>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	4a4a      	ldr	r2, [pc, #296]	; (80018c8 <HAL_GPIO_Init+0x34c>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d101      	bne.n	80017a6 <HAL_GPIO_Init+0x22a>
 80017a2:	2306      	movs	r3, #6
 80017a4:	e00c      	b.n	80017c0 <HAL_GPIO_Init+0x244>
 80017a6:	2307      	movs	r3, #7
 80017a8:	e00a      	b.n	80017c0 <HAL_GPIO_Init+0x244>
 80017aa:	2305      	movs	r3, #5
 80017ac:	e008      	b.n	80017c0 <HAL_GPIO_Init+0x244>
 80017ae:	2304      	movs	r3, #4
 80017b0:	e006      	b.n	80017c0 <HAL_GPIO_Init+0x244>
 80017b2:	2303      	movs	r3, #3
 80017b4:	e004      	b.n	80017c0 <HAL_GPIO_Init+0x244>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e002      	b.n	80017c0 <HAL_GPIO_Init+0x244>
 80017ba:	2301      	movs	r3, #1
 80017bc:	e000      	b.n	80017c0 <HAL_GPIO_Init+0x244>
 80017be:	2300      	movs	r3, #0
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	f002 0203 	and.w	r2, r2, #3
 80017c6:	0092      	lsls	r2, r2, #2
 80017c8:	4093      	lsls	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017d0:	4937      	ldr	r1, [pc, #220]	; (80018b0 <HAL_GPIO_Init+0x334>)
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	089b      	lsrs	r3, r3, #2
 80017d6:	3302      	adds	r3, #2
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017de:	4b3b      	ldr	r3, [pc, #236]	; (80018cc <HAL_GPIO_Init+0x350>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	43db      	mvns	r3, r3
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001802:	4a32      	ldr	r2, [pc, #200]	; (80018cc <HAL_GPIO_Init+0x350>)
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001808:	4b30      	ldr	r3, [pc, #192]	; (80018cc <HAL_GPIO_Init+0x350>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	43db      	mvns	r3, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800182c:	4a27      	ldr	r2, [pc, #156]	; (80018cc <HAL_GPIO_Init+0x350>)
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001832:	4b26      	ldr	r3, [pc, #152]	; (80018cc <HAL_GPIO_Init+0x350>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	43db      	mvns	r3, r3
 800183c:	693a      	ldr	r2, [r7, #16]
 800183e:	4013      	ands	r3, r2
 8001840:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001856:	4a1d      	ldr	r2, [pc, #116]	; (80018cc <HAL_GPIO_Init+0x350>)
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <HAL_GPIO_Init+0x350>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	43db      	mvns	r3, r3
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	4013      	ands	r3, r2
 800186a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001880:	4a12      	ldr	r2, [pc, #72]	; (80018cc <HAL_GPIO_Init+0x350>)
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3301      	adds	r3, #1
 800188a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa22 f303 	lsr.w	r3, r2, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	f47f ae78 	bne.w	800158c <HAL_GPIO_Init+0x10>
  }
}
 800189c:	bf00      	nop
 800189e:	bf00      	nop
 80018a0:	371c      	adds	r7, #28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000
 80018b0:	40010000 	.word	0x40010000
 80018b4:	48000400 	.word	0x48000400
 80018b8:	48000800 	.word	0x48000800
 80018bc:	48000c00 	.word	0x48000c00
 80018c0:	48001000 	.word	0x48001000
 80018c4:	48001400 	.word	0x48001400
 80018c8:	48001800 	.word	0x48001800
 80018cc:	40010400 	.word	0x40010400

080018d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	887b      	ldrh	r3, [r7, #2]
 80018e2:	4013      	ands	r3, r2
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d002      	beq.n	80018ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018e8:	2301      	movs	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
 80018ec:	e001      	b.n	80018f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018ee:	2300      	movs	r3, #0
 80018f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	807b      	strh	r3, [r7, #2]
 800190c:	4613      	mov	r3, r2
 800190e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001910:	787b      	ldrb	r3, [r7, #1]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001916:	887a      	ldrh	r2, [r7, #2]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800191c:	e002      	b.n	8001924 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr

08001930 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800193c:	695a      	ldr	r2, [r3, #20]
 800193e:	88fb      	ldrh	r3, [r7, #6]
 8001940:	4013      	ands	r3, r2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d006      	beq.n	8001954 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001946:	4a05      	ldr	r2, [pc, #20]	; (800195c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001948:	88fb      	ldrh	r3, [r7, #6]
 800194a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800194c:	88fb      	ldrh	r3, [r7, #6]
 800194e:	4618      	mov	r0, r3
 8001950:	f000 f806 	bl	8001960 <HAL_GPIO_EXTI_Callback>
  }
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40010400 	.word	0x40010400

08001960 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
	...

08001978 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800197c:	4b04      	ldr	r3, [pc, #16]	; (8001990 <HAL_PWREx_GetVoltageRange+0x18>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40007000 	.word	0x40007000

08001994 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019a2:	d130      	bne.n	8001a06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019a4:	4b23      	ldr	r3, [pc, #140]	; (8001a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019b0:	d038      	beq.n	8001a24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b2:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019ba:	4a1e      	ldr	r2, [pc, #120]	; (8001a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019c2:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2232      	movs	r2, #50	; 0x32
 80019c8:	fb02 f303 	mul.w	r3, r2, r3
 80019cc:	4a1b      	ldr	r2, [pc, #108]	; (8001a3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019ce:	fba2 2303 	umull	r2, r3, r2, r3
 80019d2:	0c9b      	lsrs	r3, r3, #18
 80019d4:	3301      	adds	r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019d8:	e002      	b.n	80019e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3b01      	subs	r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019e0:	4b14      	ldr	r3, [pc, #80]	; (8001a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ec:	d102      	bne.n	80019f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1f2      	bne.n	80019da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019f4:	4b0f      	ldr	r3, [pc, #60]	; (8001a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a00:	d110      	bne.n	8001a24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e00f      	b.n	8001a26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a06:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a12:	d007      	beq.n	8001a24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a1c:	4a05      	ldr	r2, [pc, #20]	; (8001a34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a24:	2300      	movs	r3, #0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3714      	adds	r7, #20
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	40007000 	.word	0x40007000
 8001a38:	20000130 	.word	0x20000130
 8001a3c:	431bde83 	.word	0x431bde83

08001a40 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d101      	bne.n	8001a52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e3ca      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a52:	4b97      	ldr	r3, [pc, #604]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 030c 	and.w	r3, r3, #12
 8001a5a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a5c:	4b94      	ldr	r3, [pc, #592]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	f003 0303 	and.w	r3, r3, #3
 8001a64:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0310 	and.w	r3, r3, #16
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 80e4 	beq.w	8001c3c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a74:	69bb      	ldr	r3, [r7, #24]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d007      	beq.n	8001a8a <HAL_RCC_OscConfig+0x4a>
 8001a7a:	69bb      	ldr	r3, [r7, #24]
 8001a7c:	2b0c      	cmp	r3, #12
 8001a7e:	f040 808b 	bne.w	8001b98 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	f040 8087 	bne.w	8001b98 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a8a:	4b89      	ldr	r3, [pc, #548]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d005      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x62>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d101      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e3a2      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1a      	ldr	r2, [r3, #32]
 8001aa6:	4b82      	ldr	r3, [pc, #520]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0308 	and.w	r3, r3, #8
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <HAL_RCC_OscConfig+0x7c>
 8001ab2:	4b7f      	ldr	r3, [pc, #508]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aba:	e005      	b.n	8001ac8 <HAL_RCC_OscConfig+0x88>
 8001abc:	4b7c      	ldr	r3, [pc, #496]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d223      	bcs.n	8001b14 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 fd1d 	bl	8002510 <RCC_SetFlashLatencyFromMSIRange>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e383      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ae0:	4b73      	ldr	r3, [pc, #460]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a72      	ldr	r2, [pc, #456]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001ae6:	f043 0308 	orr.w	r3, r3, #8
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	4b70      	ldr	r3, [pc, #448]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	496d      	ldr	r1, [pc, #436]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001afe:	4b6c      	ldr	r3, [pc, #432]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	4968      	ldr	r1, [pc, #416]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	604b      	str	r3, [r1, #4]
 8001b12:	e025      	b.n	8001b60 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b14:	4b66      	ldr	r3, [pc, #408]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a65      	ldr	r2, [pc, #404]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	f043 0308 	orr.w	r3, r3, #8
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b63      	ldr	r3, [pc, #396]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	4960      	ldr	r1, [pc, #384]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b32:	4b5f      	ldr	r3, [pc, #380]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	495b      	ldr	r1, [pc, #364]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f000 fcdd 	bl	8002510 <RCC_SetFlashLatencyFromMSIRange>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e343      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b60:	f000 fc4a 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 8001b64:	4602      	mov	r2, r0
 8001b66:	4b52      	ldr	r3, [pc, #328]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	091b      	lsrs	r3, r3, #4
 8001b6c:	f003 030f 	and.w	r3, r3, #15
 8001b70:	4950      	ldr	r1, [pc, #320]	; (8001cb4 <HAL_RCC_OscConfig+0x274>)
 8001b72:	5ccb      	ldrb	r3, [r1, r3]
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	fa22 f303 	lsr.w	r3, r2, r3
 8001b7c:	4a4e      	ldr	r2, [pc, #312]	; (8001cb8 <HAL_RCC_OscConfig+0x278>)
 8001b7e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b80:	4b4e      	ldr	r3, [pc, #312]	; (8001cbc <HAL_RCC_OscConfig+0x27c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff fb67 	bl	8001258 <HAL_InitTick>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b8e:	7bfb      	ldrb	r3, [r7, #15]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d052      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b94:	7bfb      	ldrb	r3, [r7, #15]
 8001b96:	e327      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	699b      	ldr	r3, [r3, #24]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d032      	beq.n	8001c06 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ba0:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a42      	ldr	r2, [pc, #264]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bac:	f7ff fba4 	bl	80012f8 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fba0 	bl	80012f8 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e310      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bc6:	4b3a      	ldr	r3, [pc, #232]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bd2:	4b37      	ldr	r3, [pc, #220]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a36      	ldr	r2, [pc, #216]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001bd8:	f043 0308 	orr.w	r3, r3, #8
 8001bdc:	6013      	str	r3, [r2, #0]
 8001bde:	4b34      	ldr	r3, [pc, #208]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4931      	ldr	r1, [pc, #196]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001bec:	4313      	orrs	r3, r2
 8001bee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bf0:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	021b      	lsls	r3, r3, #8
 8001bfe:	492c      	ldr	r1, [pc, #176]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
 8001c04:	e01a      	b.n	8001c3c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c06:	4b2a      	ldr	r3, [pc, #168]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a29      	ldr	r2, [pc, #164]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c12:	f7ff fb71 	bl	80012f8 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c1a:	f7ff fb6d 	bl	80012f8 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e2dd      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c2c:	4b20      	ldr	r3, [pc, #128]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x1da>
 8001c38:	e000      	b.n	8001c3c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c3a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0301 	and.w	r3, r3, #1
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d074      	beq.n	8001d32 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c48:	69bb      	ldr	r3, [r7, #24]
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d005      	beq.n	8001c5a <HAL_RCC_OscConfig+0x21a>
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	2b0c      	cmp	r3, #12
 8001c52:	d10e      	bne.n	8001c72 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d10b      	bne.n	8001c72 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5a:	4b15      	ldr	r3, [pc, #84]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d064      	beq.n	8001d30 <HAL_RCC_OscConfig+0x2f0>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d160      	bne.n	8001d30 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e2ba      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x24a>
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a0b      	ldr	r2, [pc, #44]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	e026      	b.n	8001cd8 <HAL_RCC_OscConfig+0x298>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c92:	d115      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x280>
 8001c94:	4b06      	ldr	r3, [pc, #24]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a05      	ldr	r2, [pc, #20]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a02      	ldr	r2, [pc, #8]	; (8001cb0 <HAL_RCC_OscConfig+0x270>)
 8001ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001caa:	6013      	str	r3, [r2, #0]
 8001cac:	e014      	b.n	8001cd8 <HAL_RCC_OscConfig+0x298>
 8001cae:	bf00      	nop
 8001cb0:	40021000 	.word	0x40021000
 8001cb4:	080033fc 	.word	0x080033fc
 8001cb8:	20000130 	.word	0x20000130
 8001cbc:	20000134 	.word	0x20000134
 8001cc0:	4ba0      	ldr	r3, [pc, #640]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a9f      	ldr	r2, [pc, #636]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001cc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cca:	6013      	str	r3, [r2, #0]
 8001ccc:	4b9d      	ldr	r3, [pc, #628]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a9c      	ldr	r2, [pc, #624]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001cd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d013      	beq.n	8001d08 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fb0a 	bl	80012f8 <HAL_GetTick>
 8001ce4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce6:	e008      	b.n	8001cfa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ce8:	f7ff fb06 	bl	80012f8 <HAL_GetTick>
 8001cec:	4602      	mov	r2, r0
 8001cee:	693b      	ldr	r3, [r7, #16]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	2b64      	cmp	r3, #100	; 0x64
 8001cf4:	d901      	bls.n	8001cfa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e276      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cfa:	4b92      	ldr	r3, [pc, #584]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d0f0      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x2a8>
 8001d06:	e014      	b.n	8001d32 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff faf6 	bl	80012f8 <HAL_GetTick>
 8001d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d10:	f7ff faf2 	bl	80012f8 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b64      	cmp	r3, #100	; 0x64
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e262      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d22:	4b88      	ldr	r3, [pc, #544]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f0      	bne.n	8001d10 <HAL_RCC_OscConfig+0x2d0>
 8001d2e:	e000      	b.n	8001d32 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d060      	beq.n	8001e00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	2b04      	cmp	r3, #4
 8001d42:	d005      	beq.n	8001d50 <HAL_RCC_OscConfig+0x310>
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2b0c      	cmp	r3, #12
 8001d48:	d119      	bne.n	8001d7e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d116      	bne.n	8001d7e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d50:	4b7c      	ldr	r3, [pc, #496]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <HAL_RCC_OscConfig+0x328>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e23f      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d68:	4b76      	ldr	r3, [pc, #472]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	061b      	lsls	r3, r3, #24
 8001d76:	4973      	ldr	r1, [pc, #460]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d7c:	e040      	b.n	8001e00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d023      	beq.n	8001dce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d86:	4b6f      	ldr	r3, [pc, #444]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a6e      	ldr	r2, [pc, #440]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d92:	f7ff fab1 	bl	80012f8 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d98:	e008      	b.n	8001dac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d9a:	f7ff faad 	bl	80012f8 <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d901      	bls.n	8001dac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001da8:	2303      	movs	r3, #3
 8001daa:	e21d      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dac:	4b65      	ldr	r3, [pc, #404]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d0f0      	beq.n	8001d9a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db8:	4b62      	ldr	r3, [pc, #392]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	061b      	lsls	r3, r3, #24
 8001dc6:	495f      	ldr	r1, [pc, #380]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
 8001dcc:	e018      	b.n	8001e00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dce:	4b5d      	ldr	r3, [pc, #372]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a5c      	ldr	r2, [pc, #368]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dda:	f7ff fa8d 	bl	80012f8 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001de2:	f7ff fa89 	bl	80012f8 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e1f9      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001df4:	4b53      	ldr	r3, [pc, #332]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1f0      	bne.n	8001de2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0308 	and.w	r3, r3, #8
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d03c      	beq.n	8001e86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d01c      	beq.n	8001e4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e14:	4b4b      	ldr	r3, [pc, #300]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001e16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e1a:	4a4a      	ldr	r2, [pc, #296]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e24:	f7ff fa68 	bl	80012f8 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2c:	f7ff fa64 	bl	80012f8 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e1d4      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e3e:	4b41      	ldr	r3, [pc, #260]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001e40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0ef      	beq.n	8001e2c <HAL_RCC_OscConfig+0x3ec>
 8001e4c:	e01b      	b.n	8001e86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e4e:	4b3d      	ldr	r3, [pc, #244]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e54:	4a3b      	ldr	r2, [pc, #236]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001e56:	f023 0301 	bic.w	r3, r3, #1
 8001e5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e5e:	f7ff fa4b 	bl	80012f8 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e66:	f7ff fa47 	bl	80012f8 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e1b7      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e78:	4b32      	ldr	r3, [pc, #200]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1ef      	bne.n	8001e66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0304 	and.w	r3, r3, #4
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 80a6 	beq.w	8001fe0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e94:	2300      	movs	r3, #0
 8001e96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e98:	4b2a      	ldr	r3, [pc, #168]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10d      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ea4:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea8:	4a26      	ldr	r2, [pc, #152]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eae:	6593      	str	r3, [r2, #88]	; 0x58
 8001eb0:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <HAL_RCC_OscConfig+0x508>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d118      	bne.n	8001efe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ecc:	4b1e      	ldr	r3, [pc, #120]	; (8001f48 <HAL_RCC_OscConfig+0x508>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1d      	ldr	r2, [pc, #116]	; (8001f48 <HAL_RCC_OscConfig+0x508>)
 8001ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed8:	f7ff fa0e 	bl	80012f8 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee0:	f7ff fa0a 	bl	80012f8 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e17a      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef2:	4b15      	ldr	r3, [pc, #84]	; (8001f48 <HAL_RCC_OscConfig+0x508>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d108      	bne.n	8001f18 <HAL_RCC_OscConfig+0x4d8>
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f0c:	4a0d      	ldr	r2, [pc, #52]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f16:	e029      	b.n	8001f6c <HAL_RCC_OscConfig+0x52c>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b05      	cmp	r3, #5
 8001f1e:	d115      	bne.n	8001f4c <HAL_RCC_OscConfig+0x50c>
 8001f20:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f26:	4a07      	ldr	r2, [pc, #28]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001f28:	f043 0304 	orr.w	r3, r3, #4
 8001f2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f30:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f36:	4a03      	ldr	r2, [pc, #12]	; (8001f44 <HAL_RCC_OscConfig+0x504>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f40:	e014      	b.n	8001f6c <HAL_RCC_OscConfig+0x52c>
 8001f42:	bf00      	nop
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40007000 	.word	0x40007000
 8001f4c:	4b9c      	ldr	r3, [pc, #624]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 8001f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f52:	4a9b      	ldr	r2, [pc, #620]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 8001f54:	f023 0301 	bic.w	r3, r3, #1
 8001f58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f5c:	4b98      	ldr	r3, [pc, #608]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 8001f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f62:	4a97      	ldr	r2, [pc, #604]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 8001f64:	f023 0304 	bic.w	r3, r3, #4
 8001f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d016      	beq.n	8001fa2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f74:	f7ff f9c0 	bl	80012f8 <HAL_GetTick>
 8001f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f7c:	f7ff f9bc 	bl	80012f8 <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e12a      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f92:	4b8b      	ldr	r3, [pc, #556]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 8001f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d0ed      	beq.n	8001f7c <HAL_RCC_OscConfig+0x53c>
 8001fa0:	e015      	b.n	8001fce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa2:	f7ff f9a9 	bl	80012f8 <HAL_GetTick>
 8001fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fa8:	e00a      	b.n	8001fc0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7ff f9a5 	bl	80012f8 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d901      	bls.n	8001fc0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	e113      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fc0:	4b7f      	ldr	r3, [pc, #508]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc6:	f003 0302 	and.w	r3, r3, #2
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d1ed      	bne.n	8001faa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fce:	7ffb      	ldrb	r3, [r7, #31]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d105      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd4:	4b7a      	ldr	r3, [pc, #488]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd8:	4a79      	ldr	r2, [pc, #484]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 8001fda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fde:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 80fe 	beq.w	80021e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	f040 80d0 	bne.w	8002194 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ff4:	4b72      	ldr	r3, [pc, #456]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	f003 0203 	and.w	r2, r3, #3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002004:	429a      	cmp	r2, r3
 8002006:	d130      	bne.n	800206a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	3b01      	subs	r3, #1
 8002014:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002016:	429a      	cmp	r2, r3
 8002018:	d127      	bne.n	800206a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002024:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d11f      	bne.n	800206a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800202a:	697b      	ldr	r3, [r7, #20]
 800202c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002034:	2a07      	cmp	r2, #7
 8002036:	bf14      	ite	ne
 8002038:	2201      	movne	r2, #1
 800203a:	2200      	moveq	r2, #0
 800203c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800203e:	4293      	cmp	r3, r2
 8002040:	d113      	bne.n	800206a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002042:	697b      	ldr	r3, [r7, #20]
 8002044:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204c:	085b      	lsrs	r3, r3, #1
 800204e:	3b01      	subs	r3, #1
 8002050:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d109      	bne.n	800206a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002060:	085b      	lsrs	r3, r3, #1
 8002062:	3b01      	subs	r3, #1
 8002064:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002066:	429a      	cmp	r2, r3
 8002068:	d06e      	beq.n	8002148 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	2b0c      	cmp	r3, #12
 800206e:	d069      	beq.n	8002144 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002070:	4b53      	ldr	r3, [pc, #332]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d105      	bne.n	8002088 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800207c:	4b50      	ldr	r3, [pc, #320]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d001      	beq.n	800208c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0ad      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800208c:	4b4c      	ldr	r3, [pc, #304]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a4b      	ldr	r2, [pc, #300]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 8002092:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002096:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002098:	f7ff f92e 	bl	80012f8 <HAL_GetTick>
 800209c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020a0:	f7ff f92a 	bl	80012f8 <HAL_GetTick>
 80020a4:	4602      	mov	r2, r0
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e09a      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b2:	4b43      	ldr	r3, [pc, #268]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1f0      	bne.n	80020a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020be:	4b40      	ldr	r3, [pc, #256]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	4b40      	ldr	r3, [pc, #256]	; (80021c4 <HAL_RCC_OscConfig+0x784>)
 80020c4:	4013      	ands	r3, r2
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020ce:	3a01      	subs	r2, #1
 80020d0:	0112      	lsls	r2, r2, #4
 80020d2:	4311      	orrs	r1, r2
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020d8:	0212      	lsls	r2, r2, #8
 80020da:	4311      	orrs	r1, r2
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020e0:	0852      	lsrs	r2, r2, #1
 80020e2:	3a01      	subs	r2, #1
 80020e4:	0552      	lsls	r2, r2, #21
 80020e6:	4311      	orrs	r1, r2
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020ec:	0852      	lsrs	r2, r2, #1
 80020ee:	3a01      	subs	r2, #1
 80020f0:	0652      	lsls	r2, r2, #25
 80020f2:	4311      	orrs	r1, r2
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020f8:	0912      	lsrs	r2, r2, #4
 80020fa:	0452      	lsls	r2, r2, #17
 80020fc:	430a      	orrs	r2, r1
 80020fe:	4930      	ldr	r1, [pc, #192]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 8002100:	4313      	orrs	r3, r2
 8002102:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002104:	4b2e      	ldr	r3, [pc, #184]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a2d      	ldr	r2, [pc, #180]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 800210a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800210e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002110:	4b2b      	ldr	r3, [pc, #172]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	4a2a      	ldr	r2, [pc, #168]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 8002116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800211a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800211c:	f7ff f8ec 	bl	80012f8 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002124:	f7ff f8e8 	bl	80012f8 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e058      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002136:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002142:	e050      	b.n	80021e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e04f      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002148:	4b1d      	ldr	r3, [pc, #116]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d148      	bne.n	80021e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002154:	4b1a      	ldr	r3, [pc, #104]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a19      	ldr	r2, [pc, #100]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 800215a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800215e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002160:	4b17      	ldr	r3, [pc, #92]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a16      	ldr	r2, [pc, #88]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 8002166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800216a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800216c:	f7ff f8c4 	bl	80012f8 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002174:	f7ff f8c0 	bl	80012f8 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e030      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002186:	4b0e      	ldr	r3, [pc, #56]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x734>
 8002192:	e028      	b.n	80021e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	2b0c      	cmp	r3, #12
 8002198:	d023      	beq.n	80021e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a08      	ldr	r2, [pc, #32]	; (80021c0 <HAL_RCC_OscConfig+0x780>)
 80021a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a6:	f7ff f8a7 	bl	80012f8 <HAL_GetTick>
 80021aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ac:	e00c      	b.n	80021c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ae:	f7ff f8a3 	bl	80012f8 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d905      	bls.n	80021c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e013      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
 80021c0:	40021000 	.word	0x40021000
 80021c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c8:	4b09      	ldr	r3, [pc, #36]	; (80021f0 <HAL_RCC_OscConfig+0x7b0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1ec      	bne.n	80021ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021d4:	4b06      	ldr	r3, [pc, #24]	; (80021f0 <HAL_RCC_OscConfig+0x7b0>)
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	4905      	ldr	r1, [pc, #20]	; (80021f0 <HAL_RCC_OscConfig+0x7b0>)
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_RCC_OscConfig+0x7b4>)
 80021dc:	4013      	ands	r3, r2
 80021de:	60cb      	str	r3, [r1, #12]
 80021e0:	e001      	b.n	80021e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e000      	b.n	80021e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3720      	adds	r7, #32
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	40021000 	.word	0x40021000
 80021f4:	feeefffc 	.word	0xfeeefffc

080021f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e0e7      	b.n	80023dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800220c:	4b75      	ldr	r3, [pc, #468]	; (80023e4 <HAL_RCC_ClockConfig+0x1ec>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d910      	bls.n	800223c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b72      	ldr	r3, [pc, #456]	; (80023e4 <HAL_RCC_ClockConfig+0x1ec>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 0207 	bic.w	r2, r3, #7
 8002222:	4970      	ldr	r1, [pc, #448]	; (80023e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b6e      	ldr	r3, [pc, #440]	; (80023e4 <HAL_RCC_ClockConfig+0x1ec>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0cf      	b.n	80023dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d010      	beq.n	800226a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	4b66      	ldr	r3, [pc, #408]	; (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002254:	429a      	cmp	r2, r3
 8002256:	d908      	bls.n	800226a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002258:	4b63      	ldr	r3, [pc, #396]	; (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	4960      	ldr	r1, [pc, #384]	; (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0301 	and.w	r3, r3, #1
 8002272:	2b00      	cmp	r3, #0
 8002274:	d04c      	beq.n	8002310 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	2b03      	cmp	r3, #3
 800227c:	d107      	bne.n	800228e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227e:	4b5a      	ldr	r3, [pc, #360]	; (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d121      	bne.n	80022ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e0a6      	b.n	80023dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	2b02      	cmp	r3, #2
 8002294:	d107      	bne.n	80022a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002296:	4b54      	ldr	r3, [pc, #336]	; (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d115      	bne.n	80022ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e09a      	b.n	80023dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d107      	bne.n	80022be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022ae:	4b4e      	ldr	r3, [pc, #312]	; (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e08e      	b.n	80023dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022be:	4b4a      	ldr	r3, [pc, #296]	; (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e086      	b.n	80023dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022ce:	4b46      	ldr	r3, [pc, #280]	; (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f023 0203 	bic.w	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4943      	ldr	r1, [pc, #268]	; (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022e0:	f7ff f80a 	bl	80012f8 <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e8:	f7ff f806 	bl	80012f8 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e06e      	b.n	80023dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fe:	4b3a      	ldr	r3, [pc, #232]	; (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 020c 	and.w	r2, r3, #12
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	429a      	cmp	r2, r3
 800230e:	d1eb      	bne.n	80022e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d010      	beq.n	800233e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	4b31      	ldr	r3, [pc, #196]	; (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002328:	429a      	cmp	r2, r3
 800232a:	d208      	bcs.n	800233e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800232c:	4b2e      	ldr	r3, [pc, #184]	; (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	492b      	ldr	r1, [pc, #172]	; (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800233e:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	683a      	ldr	r2, [r7, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d210      	bcs.n	800236e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800234c:	4b25      	ldr	r3, [pc, #148]	; (80023e4 <HAL_RCC_ClockConfig+0x1ec>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f023 0207 	bic.w	r2, r3, #7
 8002354:	4923      	ldr	r1, [pc, #140]	; (80023e4 <HAL_RCC_ClockConfig+0x1ec>)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	4313      	orrs	r3, r2
 800235a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800235c:	4b21      	ldr	r3, [pc, #132]	; (80023e4 <HAL_RCC_ClockConfig+0x1ec>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	429a      	cmp	r2, r3
 8002368:	d001      	beq.n	800236e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e036      	b.n	80023dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0304 	and.w	r3, r3, #4
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800237a:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	4918      	ldr	r1, [pc, #96]	; (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002388:	4313      	orrs	r3, r2
 800238a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d009      	beq.n	80023ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4910      	ldr	r1, [pc, #64]	; (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023ac:	f000 f824 	bl	80023f8 <HAL_RCC_GetSysClockFreq>
 80023b0:	4602      	mov	r2, r0
 80023b2:	4b0d      	ldr	r3, [pc, #52]	; (80023e8 <HAL_RCC_ClockConfig+0x1f0>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	091b      	lsrs	r3, r3, #4
 80023b8:	f003 030f 	and.w	r3, r3, #15
 80023bc:	490b      	ldr	r1, [pc, #44]	; (80023ec <HAL_RCC_ClockConfig+0x1f4>)
 80023be:	5ccb      	ldrb	r3, [r1, r3]
 80023c0:	f003 031f 	and.w	r3, r3, #31
 80023c4:	fa22 f303 	lsr.w	r3, r2, r3
 80023c8:	4a09      	ldr	r2, [pc, #36]	; (80023f0 <HAL_RCC_ClockConfig+0x1f8>)
 80023ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023cc:	4b09      	ldr	r3, [pc, #36]	; (80023f4 <HAL_RCC_ClockConfig+0x1fc>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe ff41 	bl	8001258 <HAL_InitTick>
 80023d6:	4603      	mov	r3, r0
 80023d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80023da:	7afb      	ldrb	r3, [r7, #11]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40022000 	.word	0x40022000
 80023e8:	40021000 	.word	0x40021000
 80023ec:	080033fc 	.word	0x080033fc
 80023f0:	20000130 	.word	0x20000130
 80023f4:	20000134 	.word	0x20000134

080023f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b089      	sub	sp, #36	; 0x24
 80023fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002406:	4b3e      	ldr	r3, [pc, #248]	; (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002410:	4b3b      	ldr	r3, [pc, #236]	; (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	f003 0303 	and.w	r3, r3, #3
 8002418:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d005      	beq.n	800242c <HAL_RCC_GetSysClockFreq+0x34>
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2b0c      	cmp	r3, #12
 8002424:	d121      	bne.n	800246a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d11e      	bne.n	800246a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800242c:	4b34      	ldr	r3, [pc, #208]	; (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d107      	bne.n	8002448 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002438:	4b31      	ldr	r3, [pc, #196]	; (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 800243a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	f003 030f 	and.w	r3, r3, #15
 8002444:	61fb      	str	r3, [r7, #28]
 8002446:	e005      	b.n	8002454 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002448:	4b2d      	ldr	r3, [pc, #180]	; (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002454:	4a2b      	ldr	r2, [pc, #172]	; (8002504 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10d      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	2b04      	cmp	r3, #4
 800246e:	d102      	bne.n	8002476 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002470:	4b25      	ldr	r3, [pc, #148]	; (8002508 <HAL_RCC_GetSysClockFreq+0x110>)
 8002472:	61bb      	str	r3, [r7, #24]
 8002474:	e004      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b08      	cmp	r3, #8
 800247a:	d101      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800247c:	4b23      	ldr	r3, [pc, #140]	; (800250c <HAL_RCC_GetSysClockFreq+0x114>)
 800247e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	2b0c      	cmp	r3, #12
 8002484:	d134      	bne.n	80024f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002486:	4b1e      	ldr	r3, [pc, #120]	; (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d003      	beq.n	800249e <HAL_RCC_GetSysClockFreq+0xa6>
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	2b03      	cmp	r3, #3
 800249a:	d003      	beq.n	80024a4 <HAL_RCC_GetSysClockFreq+0xac>
 800249c:	e005      	b.n	80024aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800249e:	4b1a      	ldr	r3, [pc, #104]	; (8002508 <HAL_RCC_GetSysClockFreq+0x110>)
 80024a0:	617b      	str	r3, [r7, #20]
      break;
 80024a2:	e005      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024a4:	4b19      	ldr	r3, [pc, #100]	; (800250c <HAL_RCC_GetSysClockFreq+0x114>)
 80024a6:	617b      	str	r3, [r7, #20]
      break;
 80024a8:	e002      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	617b      	str	r3, [r7, #20]
      break;
 80024ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024b0:	4b13      	ldr	r3, [pc, #76]	; (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	091b      	lsrs	r3, r3, #4
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	3301      	adds	r3, #1
 80024bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024be:	4b10      	ldr	r3, [pc, #64]	; (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	0a1b      	lsrs	r3, r3, #8
 80024c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	fb03 f202 	mul.w	r2, r3, r2
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024d6:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_RCC_GetSysClockFreq+0x108>)
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	0e5b      	lsrs	r3, r3, #25
 80024dc:	f003 0303 	and.w	r3, r3, #3
 80024e0:	3301      	adds	r3, #1
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024f0:	69bb      	ldr	r3, [r7, #24]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3724      	adds	r7, #36	; 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40021000 	.word	0x40021000
 8002504:	0800340c 	.word	0x0800340c
 8002508:	00f42400 	.word	0x00f42400
 800250c:	007a1200 	.word	0x007a1200

08002510 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b086      	sub	sp, #24
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002518:	2300      	movs	r3, #0
 800251a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800251c:	4b2a      	ldr	r3, [pc, #168]	; (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002528:	f7ff fa26 	bl	8001978 <HAL_PWREx_GetVoltageRange>
 800252c:	6178      	str	r0, [r7, #20]
 800252e:	e014      	b.n	800255a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002530:	4b25      	ldr	r3, [pc, #148]	; (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002534:	4a24      	ldr	r2, [pc, #144]	; (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253a:	6593      	str	r3, [r2, #88]	; 0x58
 800253c:	4b22      	ldr	r3, [pc, #136]	; (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800253e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002548:	f7ff fa16 	bl	8001978 <HAL_PWREx_GetVoltageRange>
 800254c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800254e:	4b1e      	ldr	r3, [pc, #120]	; (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002552:	4a1d      	ldr	r2, [pc, #116]	; (80025c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002558:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002560:	d10b      	bne.n	800257a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b80      	cmp	r3, #128	; 0x80
 8002566:	d919      	bls.n	800259c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2ba0      	cmp	r3, #160	; 0xa0
 800256c:	d902      	bls.n	8002574 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800256e:	2302      	movs	r3, #2
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	e013      	b.n	800259c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002574:	2301      	movs	r3, #1
 8002576:	613b      	str	r3, [r7, #16]
 8002578:	e010      	b.n	800259c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2b80      	cmp	r3, #128	; 0x80
 800257e:	d902      	bls.n	8002586 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002580:	2303      	movs	r3, #3
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	e00a      	b.n	800259c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b80      	cmp	r3, #128	; 0x80
 800258a:	d102      	bne.n	8002592 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800258c:	2302      	movs	r3, #2
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	e004      	b.n	800259c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b70      	cmp	r3, #112	; 0x70
 8002596:	d101      	bne.n	800259c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002598:	2301      	movs	r3, #1
 800259a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f023 0207 	bic.w	r2, r3, #7
 80025a4:	4909      	ldr	r1, [pc, #36]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025ac:	4b07      	ldr	r3, [pc, #28]	; (80025cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d001      	beq.n	80025be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e000      	b.n	80025c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3718      	adds	r7, #24
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40022000 	.word	0x40022000

080025d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e095      	b.n	800270e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d108      	bne.n	80025fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025f2:	d009      	beq.n	8002608 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	61da      	str	r2, [r3, #28]
 80025fa:	e005      	b.n	8002608 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002614:	b2db      	uxtb	r3, r3
 8002616:	2b00      	cmp	r3, #0
 8002618:	d106      	bne.n	8002628 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f7fe fce6 	bl	8000ff4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800263e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002648:	d902      	bls.n	8002650 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800264a:	2300      	movs	r3, #0
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	e002      	b.n	8002656 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002654:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800265e:	d007      	beq.n	8002670 <HAL_SPI_Init+0xa0>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002668:	d002      	beq.n	8002670 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002680:	431a      	orrs	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f003 0302 	and.w	r3, r3, #2
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	695b      	ldr	r3, [r3, #20]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026a8:	431a      	orrs	r2, r3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a1b      	ldr	r3, [r3, #32]
 80026ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b2:	ea42 0103 	orr.w	r1, r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	0c1b      	lsrs	r3, r3, #16
 80026cc:	f003 0204 	and.w	r2, r3, #4
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80026ec:	ea42 0103 	orr.w	r1, r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b088      	sub	sp, #32
 800271a:	af00      	add	r7, sp, #0
 800271c:	60f8      	str	r0, [r7, #12]
 800271e:	60b9      	str	r1, [r7, #8]
 8002720:	603b      	str	r3, [r7, #0]
 8002722:	4613      	mov	r3, r2
 8002724:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002730:	2b01      	cmp	r3, #1
 8002732:	d101      	bne.n	8002738 <HAL_SPI_Transmit+0x22>
 8002734:	2302      	movs	r3, #2
 8002736:	e15f      	b.n	80029f8 <HAL_SPI_Transmit+0x2e2>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002740:	f7fe fdda 	bl	80012f8 <HAL_GetTick>
 8002744:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002746:	88fb      	ldrh	r3, [r7, #6]
 8002748:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b01      	cmp	r3, #1
 8002754:	d002      	beq.n	800275c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002756:	2302      	movs	r3, #2
 8002758:	77fb      	strb	r3, [r7, #31]
    goto error;
 800275a:	e148      	b.n	80029ee <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d002      	beq.n	8002768 <HAL_SPI_Transmit+0x52>
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d102      	bne.n	800276e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800276c:	e13f      	b.n	80029ee <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2203      	movs	r2, #3
 8002772:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	88fa      	ldrh	r2, [r7, #6]
 8002786:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	88fa      	ldrh	r2, [r7, #6]
 800278c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2200      	movs	r2, #0
 8002798:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027b8:	d10f      	bne.n	80027da <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027e4:	2b40      	cmp	r3, #64	; 0x40
 80027e6:	d007      	beq.n	80027f8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002800:	d94f      	bls.n	80028a2 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d002      	beq.n	8002810 <HAL_SPI_Transmit+0xfa>
 800280a:	8afb      	ldrh	r3, [r7, #22]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d142      	bne.n	8002896 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002814:	881a      	ldrh	r2, [r3, #0]
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002820:	1c9a      	adds	r2, r3, #2
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800282a:	b29b      	uxth	r3, r3
 800282c:	3b01      	subs	r3, #1
 800282e:	b29a      	uxth	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002834:	e02f      	b.n	8002896 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b02      	cmp	r3, #2
 8002842:	d112      	bne.n	800286a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002848:	881a      	ldrh	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002854:	1c9a      	adds	r2, r3, #2
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800285e:	b29b      	uxth	r3, r3
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002868:	e015      	b.n	8002896 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800286a:	f7fe fd45 	bl	80012f8 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d803      	bhi.n	8002882 <HAL_SPI_Transmit+0x16c>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002880:	d102      	bne.n	8002888 <HAL_SPI_Transmit+0x172>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d106      	bne.n	8002896 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002894:	e0ab      	b.n	80029ee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800289a:	b29b      	uxth	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1ca      	bne.n	8002836 <HAL_SPI_Transmit+0x120>
 80028a0:	e080      	b.n	80029a4 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <HAL_SPI_Transmit+0x19a>
 80028aa:	8afb      	ldrh	r3, [r7, #22]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d174      	bne.n	800299a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d912      	bls.n	80028e0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028be:	881a      	ldrh	r2, [r3, #0]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ca:	1c9a      	adds	r2, r3, #2
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	3b02      	subs	r3, #2
 80028d8:	b29a      	uxth	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028de:	e05c      	b.n	800299a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	330c      	adds	r3, #12
 80028ea:	7812      	ldrb	r2, [r2, #0]
 80028ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f2:	1c5a      	adds	r2, r3, #1
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002906:	e048      	b.n	800299a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b02      	cmp	r3, #2
 8002914:	d12b      	bne.n	800296e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800291a:	b29b      	uxth	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d912      	bls.n	8002946 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002924:	881a      	ldrh	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002930:	1c9a      	adds	r2, r3, #2
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800293a:	b29b      	uxth	r3, r3
 800293c:	3b02      	subs	r3, #2
 800293e:	b29a      	uxth	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002944:	e029      	b.n	800299a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	330c      	adds	r3, #12
 8002950:	7812      	ldrb	r2, [r2, #0]
 8002952:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800296c:	e015      	b.n	800299a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800296e:	f7fe fcc3 	bl	80012f8 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d803      	bhi.n	8002986 <HAL_SPI_Transmit+0x270>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002984:	d102      	bne.n	800298c <HAL_SPI_Transmit+0x276>
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d106      	bne.n	800299a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8002998:	e029      	b.n	80029ee <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800299e:	b29b      	uxth	r3, r3
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1b1      	bne.n	8002908 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	6839      	ldr	r1, [r7, #0]
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f000 fb69 	bl	8003080 <SPI_EndRxTxTransaction>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d002      	beq.n	80029ba <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2220      	movs	r2, #32
 80029b8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10a      	bne.n	80029d8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029c2:	2300      	movs	r3, #0
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	613b      	str	r3, [r7, #16]
 80029d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d002      	beq.n	80029e6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	77fb      	strb	r3, [r7, #31]
 80029e4:	e003      	b.n	80029ee <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80029f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3720      	adds	r7, #32
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}

08002a00 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	; 0x28
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
 8002a0c:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a12:	2300      	movs	r3, #0
 8002a14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_SPI_TransmitReceive+0x26>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e20a      	b.n	8002e3c <HAL_SPI_TransmitReceive+0x43c>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a2e:	f7fe fc63 	bl	80012f8 <HAL_GetTick>
 8002a32:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a3a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002a42:	887b      	ldrh	r3, [r7, #2]
 8002a44:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002a46:	887b      	ldrh	r3, [r7, #2]
 8002a48:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002a4a:	7efb      	ldrb	r3, [r7, #27]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d00e      	beq.n	8002a6e <HAL_SPI_TransmitReceive+0x6e>
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a56:	d106      	bne.n	8002a66 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d102      	bne.n	8002a66 <HAL_SPI_TransmitReceive+0x66>
 8002a60:	7efb      	ldrb	r3, [r7, #27]
 8002a62:	2b04      	cmp	r3, #4
 8002a64:	d003      	beq.n	8002a6e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002a66:	2302      	movs	r3, #2
 8002a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002a6c:	e1e0      	b.n	8002e30 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_SPI_TransmitReceive+0x80>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <HAL_SPI_TransmitReceive+0x80>
 8002a7a:	887b      	ldrh	r3, [r7, #2]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d103      	bne.n	8002a88 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002a86:	e1d3      	b.n	8002e30 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d003      	beq.n	8002a9c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2205      	movs	r2, #5
 8002a98:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	887a      	ldrh	r2, [r7, #2]
 8002aac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	887a      	ldrh	r2, [r7, #2]
 8002ab4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	68ba      	ldr	r2, [r7, #8]
 8002abc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	887a      	ldrh	r2, [r7, #2]
 8002ac2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	887a      	ldrh	r2, [r7, #2]
 8002ac8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2200      	movs	r2, #0
 8002ace:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ade:	d802      	bhi.n	8002ae6 <HAL_SPI_TransmitReceive+0xe6>
 8002ae0:	8a3b      	ldrh	r3, [r7, #16]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d908      	bls.n	8002af8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	e007      	b.n	8002b08 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b06:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b12:	2b40      	cmp	r3, #64	; 0x40
 8002b14:	d007      	beq.n	8002b26 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b24:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b2e:	f240 8081 	bls.w	8002c34 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d002      	beq.n	8002b40 <HAL_SPI_TransmitReceive+0x140>
 8002b3a:	8a7b      	ldrh	r3, [r7, #18]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d16d      	bne.n	8002c1c <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b44:	881a      	ldrh	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b50:	1c9a      	adds	r2, r3, #2
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b64:	e05a      	b.n	8002c1c <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	689b      	ldr	r3, [r3, #8]
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d11b      	bne.n	8002bac <HAL_SPI_TransmitReceive+0x1ac>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d016      	beq.n	8002bac <HAL_SPI_TransmitReceive+0x1ac>
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d113      	bne.n	8002bac <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b88:	881a      	ldrh	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b94:	1c9a      	adds	r2, r3, #2
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d11c      	bne.n	8002bf4 <HAL_SPI_TransmitReceive+0x1f4>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d016      	beq.n	8002bf4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68da      	ldr	r2, [r3, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	b292      	uxth	r2, r2
 8002bd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	1c9a      	adds	r2, r3, #2
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002bf4:	f7fe fb80 	bl	80012f8 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d80b      	bhi.n	8002c1c <HAL_SPI_TransmitReceive+0x21c>
 8002c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c06:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c0a:	d007      	beq.n	8002c1c <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002c1a:	e109      	b.n	8002e30 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c20:	b29b      	uxth	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d19f      	bne.n	8002b66 <HAL_SPI_TransmitReceive+0x166>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d199      	bne.n	8002b66 <HAL_SPI_TransmitReceive+0x166>
 8002c32:	e0e3      	b.n	8002dfc <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d003      	beq.n	8002c44 <HAL_SPI_TransmitReceive+0x244>
 8002c3c:	8a7b      	ldrh	r3, [r7, #18]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	f040 80cf 	bne.w	8002de2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c48:	b29b      	uxth	r3, r3
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d912      	bls.n	8002c74 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c52:	881a      	ldrh	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5e:	1c9a      	adds	r2, r3, #2
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b02      	subs	r3, #2
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c72:	e0b6      	b.n	8002de2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	330c      	adds	r3, #12
 8002c7e:	7812      	ldrb	r2, [r2, #0]
 8002c80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c90:	b29b      	uxth	r3, r3
 8002c92:	3b01      	subs	r3, #1
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c9a:	e0a2      	b.n	8002de2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d134      	bne.n	8002d14 <HAL_SPI_TransmitReceive+0x314>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d02f      	beq.n	8002d14 <HAL_SPI_TransmitReceive+0x314>
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d12c      	bne.n	8002d14 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d912      	bls.n	8002cea <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc8:	881a      	ldrh	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	1c9a      	adds	r2, r3, #2
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b02      	subs	r3, #2
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ce8:	e012      	b.n	8002d10 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	330c      	adds	r3, #12
 8002cf4:	7812      	ldrb	r2, [r2, #0]
 8002cf6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfc:	1c5a      	adds	r2, r3, #1
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	b29a      	uxth	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d148      	bne.n	8002db4 <HAL_SPI_TransmitReceive+0x3b4>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d042      	beq.n	8002db4 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d923      	bls.n	8002d82 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	b292      	uxth	r2, r2
 8002d46:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4c:	1c9a      	adds	r2, r3, #2
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d58:	b29b      	uxth	r3, r3
 8002d5a:	3b02      	subs	r3, #2
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d81f      	bhi.n	8002db0 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685a      	ldr	r2, [r3, #4]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002d7e:	605a      	str	r2, [r3, #4]
 8002d80:	e016      	b.n	8002db0 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f103 020c 	add.w	r2, r3, #12
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	7812      	ldrb	r2, [r2, #0]
 8002d90:	b2d2      	uxtb	r2, r2
 8002d92:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002db0:	2301      	movs	r3, #1
 8002db2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002db4:	f7fe faa0 	bl	80012f8 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d803      	bhi.n	8002dcc <HAL_SPI_TransmitReceive+0x3cc>
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dca:	d102      	bne.n	8002dd2 <HAL_SPI_TransmitReceive+0x3d2>
 8002dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d107      	bne.n	8002de2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8002de0:	e026      	b.n	8002e30 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	f47f af57 	bne.w	8002c9c <HAL_SPI_TransmitReceive+0x29c>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	f47f af50 	bne.w	8002c9c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dfc:	69fa      	ldr	r2, [r7, #28]
 8002dfe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e00:	68f8      	ldr	r0, [r7, #12]
 8002e02:	f000 f93d 	bl	8003080 <SPI_EndRxTxTransaction>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d005      	beq.n	8002e18 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2220      	movs	r2, #32
 8002e16:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e26:	e003      	b.n	8002e30 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3728      	adds	r7, #40	; 0x28
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}

08002e44 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	4613      	mov	r3, r2
 8002e52:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e54:	f7fe fa50 	bl	80012f8 <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e5c:	1a9b      	subs	r3, r3, r2
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	4413      	add	r3, r2
 8002e62:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002e64:	f7fe fa48 	bl	80012f8 <HAL_GetTick>
 8002e68:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e6a:	4b39      	ldr	r3, [pc, #228]	; (8002f50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	015b      	lsls	r3, r3, #5
 8002e70:	0d1b      	lsrs	r3, r3, #20
 8002e72:	69fa      	ldr	r2, [r7, #28]
 8002e74:	fb02 f303 	mul.w	r3, r2, r3
 8002e78:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e7a:	e054      	b.n	8002f26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e82:	d050      	beq.n	8002f26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e84:	f7fe fa38 	bl	80012f8 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	69bb      	ldr	r3, [r7, #24]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	69fa      	ldr	r2, [r7, #28]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d902      	bls.n	8002e9a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d13d      	bne.n	8002f16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ea8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eb2:	d111      	bne.n	8002ed8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ebc:	d004      	beq.n	8002ec8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec6:	d107      	bne.n	8002ed8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ed6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ee0:	d10f      	bne.n	8002f02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	2201      	movs	r2, #1
 8002f06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e017      	b.n	8002f46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689a      	ldr	r2, [r3, #8]
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	68ba      	ldr	r2, [r7, #8]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	bf0c      	ite	eq
 8002f36:	2301      	moveq	r3, #1
 8002f38:	2300      	movne	r3, #0
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	79fb      	ldrb	r3, [r7, #7]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d19b      	bne.n	8002e7c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3720      	adds	r7, #32
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	20000130 	.word	0x20000130

08002f54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08a      	sub	sp, #40	; 0x28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
 8002f60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002f62:	2300      	movs	r3, #0
 8002f64:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002f66:	f7fe f9c7 	bl	80012f8 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	4413      	add	r3, r2
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002f76:	f7fe f9bf 	bl	80012f8 <HAL_GetTick>
 8002f7a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	330c      	adds	r3, #12
 8002f82:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002f84:	4b3d      	ldr	r3, [pc, #244]	; (800307c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00da      	lsls	r2, r3, #3
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	0d1b      	lsrs	r3, r3, #20
 8002f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f96:	fb02 f303 	mul.w	r3, r2, r3
 8002f9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002f9c:	e060      	b.n	8003060 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002fa4:	d107      	bne.n	8002fb6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d104      	bne.n	8002fb6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002fb4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fbc:	d050      	beq.n	8003060 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fbe:	f7fe f99b 	bl	80012f8 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d902      	bls.n	8002fd4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d13d      	bne.n	8003050 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002fe2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fec:	d111      	bne.n	8003012 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ff6:	d004      	beq.n	8003002 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003000:	d107      	bne.n	8003012 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003010:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800301a:	d10f      	bne.n	800303c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800303a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e010      	b.n	8003072 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003056:	2300      	movs	r3, #0
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	3b01      	subs	r3, #1
 800305e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	4013      	ands	r3, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	429a      	cmp	r2, r3
 800306e:	d196      	bne.n	8002f9e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3728      	adds	r7, #40	; 0x28
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000130 	.word	0x20000130

08003080 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af02      	add	r7, sp, #8
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	2200      	movs	r2, #0
 8003094:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f7ff ff5b 	bl	8002f54 <SPI_WaitFifoStateUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d007      	beq.n	80030b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a8:	f043 0220 	orr.w	r2, r3, #32
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e027      	b.n	8003104 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	9300      	str	r3, [sp, #0]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2200      	movs	r2, #0
 80030bc:	2180      	movs	r1, #128	; 0x80
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f7ff fec0 	bl	8002e44 <SPI_WaitFlagStateUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d007      	beq.n	80030da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ce:	f043 0220 	orr.w	r2, r3, #32
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e014      	b.n	8003104 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80030e6:	68f8      	ldr	r0, [r7, #12]
 80030e8:	f7ff ff34 	bl	8002f54 <SPI_WaitFifoStateUntilTimeout>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d007      	beq.n	8003102 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f6:	f043 0220 	orr.w	r2, r3, #32
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80030fe:	2303      	movs	r3, #3
 8003100:	e000      	b.n	8003104 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <malloc>:
 800310c:	4b02      	ldr	r3, [pc, #8]	; (8003118 <malloc+0xc>)
 800310e:	4601      	mov	r1, r0
 8003110:	6818      	ldr	r0, [r3, #0]
 8003112:	f000 b82b 	b.w	800316c <_malloc_r>
 8003116:	bf00      	nop
 8003118:	20000188 	.word	0x20000188

0800311c <free>:
 800311c:	4b02      	ldr	r3, [pc, #8]	; (8003128 <free+0xc>)
 800311e:	4601      	mov	r1, r0
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	f000 b901 	b.w	8003328 <_free_r>
 8003126:	bf00      	nop
 8003128:	20000188 	.word	0x20000188

0800312c <sbrk_aligned>:
 800312c:	b570      	push	{r4, r5, r6, lr}
 800312e:	4e0e      	ldr	r6, [pc, #56]	; (8003168 <sbrk_aligned+0x3c>)
 8003130:	460c      	mov	r4, r1
 8003132:	6831      	ldr	r1, [r6, #0]
 8003134:	4605      	mov	r5, r0
 8003136:	b911      	cbnz	r1, 800313e <sbrk_aligned+0x12>
 8003138:	f000 f8ac 	bl	8003294 <_sbrk_r>
 800313c:	6030      	str	r0, [r6, #0]
 800313e:	4621      	mov	r1, r4
 8003140:	4628      	mov	r0, r5
 8003142:	f000 f8a7 	bl	8003294 <_sbrk_r>
 8003146:	1c43      	adds	r3, r0, #1
 8003148:	d00a      	beq.n	8003160 <sbrk_aligned+0x34>
 800314a:	1cc4      	adds	r4, r0, #3
 800314c:	f024 0403 	bic.w	r4, r4, #3
 8003150:	42a0      	cmp	r0, r4
 8003152:	d007      	beq.n	8003164 <sbrk_aligned+0x38>
 8003154:	1a21      	subs	r1, r4, r0
 8003156:	4628      	mov	r0, r5
 8003158:	f000 f89c 	bl	8003294 <_sbrk_r>
 800315c:	3001      	adds	r0, #1
 800315e:	d101      	bne.n	8003164 <sbrk_aligned+0x38>
 8003160:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003164:	4620      	mov	r0, r4
 8003166:	bd70      	pop	{r4, r5, r6, pc}
 8003168:	2000034c 	.word	0x2000034c

0800316c <_malloc_r>:
 800316c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003170:	1ccd      	adds	r5, r1, #3
 8003172:	f025 0503 	bic.w	r5, r5, #3
 8003176:	3508      	adds	r5, #8
 8003178:	2d0c      	cmp	r5, #12
 800317a:	bf38      	it	cc
 800317c:	250c      	movcc	r5, #12
 800317e:	2d00      	cmp	r5, #0
 8003180:	4607      	mov	r7, r0
 8003182:	db01      	blt.n	8003188 <_malloc_r+0x1c>
 8003184:	42a9      	cmp	r1, r5
 8003186:	d905      	bls.n	8003194 <_malloc_r+0x28>
 8003188:	230c      	movs	r3, #12
 800318a:	603b      	str	r3, [r7, #0]
 800318c:	2600      	movs	r6, #0
 800318e:	4630      	mov	r0, r6
 8003190:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003194:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003268 <_malloc_r+0xfc>
 8003198:	f000 f868 	bl	800326c <__malloc_lock>
 800319c:	f8d8 3000 	ldr.w	r3, [r8]
 80031a0:	461c      	mov	r4, r3
 80031a2:	bb5c      	cbnz	r4, 80031fc <_malloc_r+0x90>
 80031a4:	4629      	mov	r1, r5
 80031a6:	4638      	mov	r0, r7
 80031a8:	f7ff ffc0 	bl	800312c <sbrk_aligned>
 80031ac:	1c43      	adds	r3, r0, #1
 80031ae:	4604      	mov	r4, r0
 80031b0:	d155      	bne.n	800325e <_malloc_r+0xf2>
 80031b2:	f8d8 4000 	ldr.w	r4, [r8]
 80031b6:	4626      	mov	r6, r4
 80031b8:	2e00      	cmp	r6, #0
 80031ba:	d145      	bne.n	8003248 <_malloc_r+0xdc>
 80031bc:	2c00      	cmp	r4, #0
 80031be:	d048      	beq.n	8003252 <_malloc_r+0xe6>
 80031c0:	6823      	ldr	r3, [r4, #0]
 80031c2:	4631      	mov	r1, r6
 80031c4:	4638      	mov	r0, r7
 80031c6:	eb04 0903 	add.w	r9, r4, r3
 80031ca:	f000 f863 	bl	8003294 <_sbrk_r>
 80031ce:	4581      	cmp	r9, r0
 80031d0:	d13f      	bne.n	8003252 <_malloc_r+0xe6>
 80031d2:	6821      	ldr	r1, [r4, #0]
 80031d4:	1a6d      	subs	r5, r5, r1
 80031d6:	4629      	mov	r1, r5
 80031d8:	4638      	mov	r0, r7
 80031da:	f7ff ffa7 	bl	800312c <sbrk_aligned>
 80031de:	3001      	adds	r0, #1
 80031e0:	d037      	beq.n	8003252 <_malloc_r+0xe6>
 80031e2:	6823      	ldr	r3, [r4, #0]
 80031e4:	442b      	add	r3, r5
 80031e6:	6023      	str	r3, [r4, #0]
 80031e8:	f8d8 3000 	ldr.w	r3, [r8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d038      	beq.n	8003262 <_malloc_r+0xf6>
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	42a2      	cmp	r2, r4
 80031f4:	d12b      	bne.n	800324e <_malloc_r+0xe2>
 80031f6:	2200      	movs	r2, #0
 80031f8:	605a      	str	r2, [r3, #4]
 80031fa:	e00f      	b.n	800321c <_malloc_r+0xb0>
 80031fc:	6822      	ldr	r2, [r4, #0]
 80031fe:	1b52      	subs	r2, r2, r5
 8003200:	d41f      	bmi.n	8003242 <_malloc_r+0xd6>
 8003202:	2a0b      	cmp	r2, #11
 8003204:	d917      	bls.n	8003236 <_malloc_r+0xca>
 8003206:	1961      	adds	r1, r4, r5
 8003208:	42a3      	cmp	r3, r4
 800320a:	6025      	str	r5, [r4, #0]
 800320c:	bf18      	it	ne
 800320e:	6059      	strne	r1, [r3, #4]
 8003210:	6863      	ldr	r3, [r4, #4]
 8003212:	bf08      	it	eq
 8003214:	f8c8 1000 	streq.w	r1, [r8]
 8003218:	5162      	str	r2, [r4, r5]
 800321a:	604b      	str	r3, [r1, #4]
 800321c:	4638      	mov	r0, r7
 800321e:	f104 060b 	add.w	r6, r4, #11
 8003222:	f000 f829 	bl	8003278 <__malloc_unlock>
 8003226:	f026 0607 	bic.w	r6, r6, #7
 800322a:	1d23      	adds	r3, r4, #4
 800322c:	1af2      	subs	r2, r6, r3
 800322e:	d0ae      	beq.n	800318e <_malloc_r+0x22>
 8003230:	1b9b      	subs	r3, r3, r6
 8003232:	50a3      	str	r3, [r4, r2]
 8003234:	e7ab      	b.n	800318e <_malloc_r+0x22>
 8003236:	42a3      	cmp	r3, r4
 8003238:	6862      	ldr	r2, [r4, #4]
 800323a:	d1dd      	bne.n	80031f8 <_malloc_r+0x8c>
 800323c:	f8c8 2000 	str.w	r2, [r8]
 8003240:	e7ec      	b.n	800321c <_malloc_r+0xb0>
 8003242:	4623      	mov	r3, r4
 8003244:	6864      	ldr	r4, [r4, #4]
 8003246:	e7ac      	b.n	80031a2 <_malloc_r+0x36>
 8003248:	4634      	mov	r4, r6
 800324a:	6876      	ldr	r6, [r6, #4]
 800324c:	e7b4      	b.n	80031b8 <_malloc_r+0x4c>
 800324e:	4613      	mov	r3, r2
 8003250:	e7cc      	b.n	80031ec <_malloc_r+0x80>
 8003252:	230c      	movs	r3, #12
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	4638      	mov	r0, r7
 8003258:	f000 f80e 	bl	8003278 <__malloc_unlock>
 800325c:	e797      	b.n	800318e <_malloc_r+0x22>
 800325e:	6025      	str	r5, [r4, #0]
 8003260:	e7dc      	b.n	800321c <_malloc_r+0xb0>
 8003262:	605b      	str	r3, [r3, #4]
 8003264:	deff      	udf	#255	; 0xff
 8003266:	bf00      	nop
 8003268:	20000348 	.word	0x20000348

0800326c <__malloc_lock>:
 800326c:	4801      	ldr	r0, [pc, #4]	; (8003274 <__malloc_lock+0x8>)
 800326e:	f000 b84b 	b.w	8003308 <__retarget_lock_acquire_recursive>
 8003272:	bf00      	nop
 8003274:	20000488 	.word	0x20000488

08003278 <__malloc_unlock>:
 8003278:	4801      	ldr	r0, [pc, #4]	; (8003280 <__malloc_unlock+0x8>)
 800327a:	f000 b846 	b.w	800330a <__retarget_lock_release_recursive>
 800327e:	bf00      	nop
 8003280:	20000488 	.word	0x20000488

08003284 <memset>:
 8003284:	4402      	add	r2, r0
 8003286:	4603      	mov	r3, r0
 8003288:	4293      	cmp	r3, r2
 800328a:	d100      	bne.n	800328e <memset+0xa>
 800328c:	4770      	bx	lr
 800328e:	f803 1b01 	strb.w	r1, [r3], #1
 8003292:	e7f9      	b.n	8003288 <memset+0x4>

08003294 <_sbrk_r>:
 8003294:	b538      	push	{r3, r4, r5, lr}
 8003296:	4d06      	ldr	r5, [pc, #24]	; (80032b0 <_sbrk_r+0x1c>)
 8003298:	2300      	movs	r3, #0
 800329a:	4604      	mov	r4, r0
 800329c:	4608      	mov	r0, r1
 800329e:	602b      	str	r3, [r5, #0]
 80032a0:	f7fd ff22 	bl	80010e8 <_sbrk>
 80032a4:	1c43      	adds	r3, r0, #1
 80032a6:	d102      	bne.n	80032ae <_sbrk_r+0x1a>
 80032a8:	682b      	ldr	r3, [r5, #0]
 80032aa:	b103      	cbz	r3, 80032ae <_sbrk_r+0x1a>
 80032ac:	6023      	str	r3, [r4, #0]
 80032ae:	bd38      	pop	{r3, r4, r5, pc}
 80032b0:	2000048c 	.word	0x2000048c

080032b4 <__errno>:
 80032b4:	4b01      	ldr	r3, [pc, #4]	; (80032bc <__errno+0x8>)
 80032b6:	6818      	ldr	r0, [r3, #0]
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	20000188 	.word	0x20000188

080032c0 <__libc_init_array>:
 80032c0:	b570      	push	{r4, r5, r6, lr}
 80032c2:	4d0d      	ldr	r5, [pc, #52]	; (80032f8 <__libc_init_array+0x38>)
 80032c4:	4c0d      	ldr	r4, [pc, #52]	; (80032fc <__libc_init_array+0x3c>)
 80032c6:	1b64      	subs	r4, r4, r5
 80032c8:	10a4      	asrs	r4, r4, #2
 80032ca:	2600      	movs	r6, #0
 80032cc:	42a6      	cmp	r6, r4
 80032ce:	d109      	bne.n	80032e4 <__libc_init_array+0x24>
 80032d0:	4d0b      	ldr	r5, [pc, #44]	; (8003300 <__libc_init_array+0x40>)
 80032d2:	4c0c      	ldr	r4, [pc, #48]	; (8003304 <__libc_init_array+0x44>)
 80032d4:	f000 f874 	bl	80033c0 <_init>
 80032d8:	1b64      	subs	r4, r4, r5
 80032da:	10a4      	asrs	r4, r4, #2
 80032dc:	2600      	movs	r6, #0
 80032de:	42a6      	cmp	r6, r4
 80032e0:	d105      	bne.n	80032ee <__libc_init_array+0x2e>
 80032e2:	bd70      	pop	{r4, r5, r6, pc}
 80032e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80032e8:	4798      	blx	r3
 80032ea:	3601      	adds	r6, #1
 80032ec:	e7ee      	b.n	80032cc <__libc_init_array+0xc>
 80032ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80032f2:	4798      	blx	r3
 80032f4:	3601      	adds	r6, #1
 80032f6:	e7f2      	b.n	80032de <__libc_init_array+0x1e>
 80032f8:	0800343c 	.word	0x0800343c
 80032fc:	0800343c 	.word	0x0800343c
 8003300:	0800343c 	.word	0x0800343c
 8003304:	08003440 	.word	0x08003440

08003308 <__retarget_lock_acquire_recursive>:
 8003308:	4770      	bx	lr

0800330a <__retarget_lock_release_recursive>:
 800330a:	4770      	bx	lr

0800330c <memcpy>:
 800330c:	440a      	add	r2, r1
 800330e:	4291      	cmp	r1, r2
 8003310:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003314:	d100      	bne.n	8003318 <memcpy+0xc>
 8003316:	4770      	bx	lr
 8003318:	b510      	push	{r4, lr}
 800331a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800331e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003322:	4291      	cmp	r1, r2
 8003324:	d1f9      	bne.n	800331a <memcpy+0xe>
 8003326:	bd10      	pop	{r4, pc}

08003328 <_free_r>:
 8003328:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800332a:	2900      	cmp	r1, #0
 800332c:	d044      	beq.n	80033b8 <_free_r+0x90>
 800332e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003332:	9001      	str	r0, [sp, #4]
 8003334:	2b00      	cmp	r3, #0
 8003336:	f1a1 0404 	sub.w	r4, r1, #4
 800333a:	bfb8      	it	lt
 800333c:	18e4      	addlt	r4, r4, r3
 800333e:	f7ff ff95 	bl	800326c <__malloc_lock>
 8003342:	4a1e      	ldr	r2, [pc, #120]	; (80033bc <_free_r+0x94>)
 8003344:	9801      	ldr	r0, [sp, #4]
 8003346:	6813      	ldr	r3, [r2, #0]
 8003348:	b933      	cbnz	r3, 8003358 <_free_r+0x30>
 800334a:	6063      	str	r3, [r4, #4]
 800334c:	6014      	str	r4, [r2, #0]
 800334e:	b003      	add	sp, #12
 8003350:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003354:	f7ff bf90 	b.w	8003278 <__malloc_unlock>
 8003358:	42a3      	cmp	r3, r4
 800335a:	d908      	bls.n	800336e <_free_r+0x46>
 800335c:	6825      	ldr	r5, [r4, #0]
 800335e:	1961      	adds	r1, r4, r5
 8003360:	428b      	cmp	r3, r1
 8003362:	bf01      	itttt	eq
 8003364:	6819      	ldreq	r1, [r3, #0]
 8003366:	685b      	ldreq	r3, [r3, #4]
 8003368:	1949      	addeq	r1, r1, r5
 800336a:	6021      	streq	r1, [r4, #0]
 800336c:	e7ed      	b.n	800334a <_free_r+0x22>
 800336e:	461a      	mov	r2, r3
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	b10b      	cbz	r3, 8003378 <_free_r+0x50>
 8003374:	42a3      	cmp	r3, r4
 8003376:	d9fa      	bls.n	800336e <_free_r+0x46>
 8003378:	6811      	ldr	r1, [r2, #0]
 800337a:	1855      	adds	r5, r2, r1
 800337c:	42a5      	cmp	r5, r4
 800337e:	d10b      	bne.n	8003398 <_free_r+0x70>
 8003380:	6824      	ldr	r4, [r4, #0]
 8003382:	4421      	add	r1, r4
 8003384:	1854      	adds	r4, r2, r1
 8003386:	42a3      	cmp	r3, r4
 8003388:	6011      	str	r1, [r2, #0]
 800338a:	d1e0      	bne.n	800334e <_free_r+0x26>
 800338c:	681c      	ldr	r4, [r3, #0]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	6053      	str	r3, [r2, #4]
 8003392:	440c      	add	r4, r1
 8003394:	6014      	str	r4, [r2, #0]
 8003396:	e7da      	b.n	800334e <_free_r+0x26>
 8003398:	d902      	bls.n	80033a0 <_free_r+0x78>
 800339a:	230c      	movs	r3, #12
 800339c:	6003      	str	r3, [r0, #0]
 800339e:	e7d6      	b.n	800334e <_free_r+0x26>
 80033a0:	6825      	ldr	r5, [r4, #0]
 80033a2:	1961      	adds	r1, r4, r5
 80033a4:	428b      	cmp	r3, r1
 80033a6:	bf04      	itt	eq
 80033a8:	6819      	ldreq	r1, [r3, #0]
 80033aa:	685b      	ldreq	r3, [r3, #4]
 80033ac:	6063      	str	r3, [r4, #4]
 80033ae:	bf04      	itt	eq
 80033b0:	1949      	addeq	r1, r1, r5
 80033b2:	6021      	streq	r1, [r4, #0]
 80033b4:	6054      	str	r4, [r2, #4]
 80033b6:	e7ca      	b.n	800334e <_free_r+0x26>
 80033b8:	b003      	add	sp, #12
 80033ba:	bd30      	pop	{r4, r5, pc}
 80033bc:	20000348 	.word	0x20000348

080033c0 <_init>:
 80033c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c2:	bf00      	nop
 80033c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033c6:	bc08      	pop	{r3}
 80033c8:	469e      	mov	lr, r3
 80033ca:	4770      	bx	lr

080033cc <_fini>:
 80033cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ce:	bf00      	nop
 80033d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033d2:	bc08      	pop	{r3}
 80033d4:	469e      	mov	lr, r3
 80033d6:	4770      	bx	lr
